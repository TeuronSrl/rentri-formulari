# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from rentri_formulari.models.esito_validazione import EsitoValidazione

class ControlloFirmeResult(BaseModel):
    """
    ControlloFirmeResult
    """
    data_firma: Optional[datetime] = None
    riferimenti: Optional[conlist(StrictStr)] = None
    codice: Optional[StrictStr] = None
    esito: Optional[EsitoValidazione] = None
    controllo: Optional[StrictStr] = None
    dettaglio: Optional[StrictStr] = None
    nome_file: Optional[StrictStr] = None
    __properties = ["data_firma", "riferimenti", "codice", "esito", "controllo", "dettaglio", "nome_file"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ControlloFirmeResult:
        """Create an instance of ControlloFirmeResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if data_firma (nullable) is None
        # and __fields_set__ contains the field
        if self.data_firma is None and "data_firma" in self.__fields_set__:
            _dict['data_firma'] = None

        # set to None if riferimenti (nullable) is None
        # and __fields_set__ contains the field
        if self.riferimenti is None and "riferimenti" in self.__fields_set__:
            _dict['riferimenti'] = None

        # set to None if codice (nullable) is None
        # and __fields_set__ contains the field
        if self.codice is None and "codice" in self.__fields_set__:
            _dict['codice'] = None

        # set to None if controllo (nullable) is None
        # and __fields_set__ contains the field
        if self.controllo is None and "controllo" in self.__fields_set__:
            _dict['controllo'] = None

        # set to None if dettaglio (nullable) is None
        # and __fields_set__ contains the field
        if self.dettaglio is None and "dettaglio" in self.__fields_set__:
            _dict['dettaglio'] = None

        # set to None if nome_file (nullable) is None
        # and __fields_set__ contains the field
        if self.nome_file is None and "nome_file" in self.__fields_set__:
            _dict['nome_file'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ControlloFirmeResult:
        """Create an instance of ControlloFirmeResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ControlloFirmeResult.parse_obj(obj)

        _obj = ControlloFirmeResult.parse_obj({
            "data_firma": obj.get("data_firma"),
            "riferimenti": obj.get("riferimenti"),
            "codice": obj.get("codice"),
            "esito": obj.get("esito"),
            "controllo": obj.get("controllo"),
            "dettaglio": obj.get("dettaglio"),
            "nome_file": obj.get("nome_file")
        })
        return _obj


