# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr

class DatiAnnotazioneModel(BaseModel):
    """
    DatiAnnotazioneModel
    """
    annotazione: constr(strict=True, min_length=1) = Field(...)
    identificativo_soggetto: constr(strict=True, min_length=1) = Field(default=..., description="Il codice fiscale del soggetto per cui viene richiesta l'aggiunta dell'annotazione al formulario.  Deve coincidere con quello di uno dei soggetti coinvolti nel formulario. L'identità con cui viene eseguita l'operazione deve avere visibilità su (o coincidere con) questo soggetto.")
    __properties = ["annotazione", "identificativo_soggetto"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiAnnotazioneModel:
        """Create an instance of DatiAnnotazioneModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiAnnotazioneModel:
        """Create an instance of DatiAnnotazioneModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiAnnotazioneModel.parse_obj(obj)

        _obj = DatiAnnotazioneModel.parse_obj({
            "annotazione": obj.get("annotazione"),
            "identificativo_soggetto": obj.get("identificativo_soggetto")
        })
        return _obj


