# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_formulari.models.dati_firma_result import DatiFirmaResult
from rentri_formulari.models.dati_trasportatore_model import DatiTrasportatoreModel
from rentri_formulari.models.quantita_model import QuantitaModel
from typing import Optional, Set
from typing_extensions import Self

class DatiTrasbordoParzialeResultModel(BaseModel):
    """
    DatiTrasbordoParzialeResultModel
    """ # noqa: E501
    trasportatore: DatiTrasportatoreModel
    data_ora_trasbordo: Optional[datetime] = Field(default=None, description="Formato ISO 8601 UTC")
    trasportatore_id: Optional[StrictInt] = None
    dati_firma: Optional[DatiFirmaResult] = None
    numero_fir: Annotated[str, Field(min_length=1, strict=True)]
    quantita_residua: QuantitaModel
    causale: Annotated[str, Field(min_length=1, strict=True)]
    __properties: ClassVar[List[str]] = ["trasportatore", "data_ora_trasbordo", "trasportatore_id", "dati_firma", "numero_fir", "quantita_residua", "causale"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiTrasbordoParzialeResultModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of trasportatore
        if self.trasportatore:
            _dict['trasportatore'] = self.trasportatore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dati_firma
        if self.dati_firma:
            _dict['dati_firma'] = self.dati_firma.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantita_residua
        if self.quantita_residua:
            _dict['quantita_residua'] = self.quantita_residua.to_dict()
        # set to None if data_ora_trasbordo (nullable) is None
        # and model_fields_set contains the field
        if self.data_ora_trasbordo is None and "data_ora_trasbordo" in self.model_fields_set:
            _dict['data_ora_trasbordo'] = None

        # set to None if trasportatore_id (nullable) is None
        # and model_fields_set contains the field
        if self.trasportatore_id is None and "trasportatore_id" in self.model_fields_set:
            _dict['trasportatore_id'] = None

        # set to None if dati_firma (nullable) is None
        # and model_fields_set contains the field
        if self.dati_firma is None and "dati_firma" in self.model_fields_set:
            _dict['dati_firma'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiTrasbordoParzialeResultModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trasportatore": DatiTrasportatoreModel.from_dict(obj["trasportatore"]) if obj.get("trasportatore") is not None else None,
            "data_ora_trasbordo": obj.get("data_ora_trasbordo"),
            "trasportatore_id": obj.get("trasportatore_id"),
            "dati_firma": DatiFirmaResult.from_dict(obj["dati_firma"]) if obj.get("dati_firma") is not None else None,
            "numero_fir": obj.get("numero_fir"),
            "quantita_residua": QuantitaModel.from_dict(obj["quantita_residua"]) if obj.get("quantita_residua") is not None else None,
            "causale": obj.get("causale")
        })
        return _obj


