# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from rentri_formulari.models.dati_accettazione_result_model import DatiAccettazioneResultModel
from rentri_formulari.models.dati_allegato_result_model import DatiAllegatoResultModel
from rentri_formulari.models.dati_annotazione_result_model import DatiAnnotazioneResultModel
from rentri_formulari.models.dati_annullamento_result_model import DatiAnnullamentoResultModel
from rentri_formulari.models.dati_destinazioni_successive_result_mdodel import DatiDestinazioniSuccessiveResultMdodel
from rentri_formulari.models.dati_partenza_result_model import DatiPartenzaResultModel
from rentri_formulari.models.dati_sosta_tecnica_result_model import DatiSostaTecnicaResultModel
from rentri_formulari.models.dati_trasbordo_parziale_result_model import DatiTrasbordoParzialeResultModel
from rentri_formulari.models.dati_trasbordo_totale_result_model import DatiTrasbordoTotaleResultModel
from rentri_formulari.models.dettaglio_formulario_dati_trasporto_inner import DettaglioFormularioDatiTrasportoInner
from rentri_formulari.models.stato_formulario import StatoFormulario
from rentri_formulari.models.vidimazione_result import VidimazioneResult

class DettaglioFormulario(BaseModel):
    """
    DettaglioFormulario
    """
    stato_formulario: Optional[StatoFormulario] = Field(default=None, description="Stati del FIR digitale<p>Valori ammessi:<ul style=\"margin:0\"><li><i>InserimentoQuantita</i> - Il formulario necessita dei dati sulla quantità del rifiuto</li><li><i>InserimentoQuantitaTrasportoIniziale</i> - Il formulario necessita dei dati sulla quantità del rifiuto e dei dati del trasporto iniziale</li><li><i>InserimentoTrasportoIniziale</i> - Il formulario necessita dei dati del trasporto iniziale</li><li><i>FirmaProduttoreTrasportatoreIniziale</i> - Il formulario necessita della firma del produttore e del trasportatore iniziale</li><li><i>FirmaTrasportatoreIniziale</i> - Il formulario necessita della firma del trasportatore iniziale</li><li><i>FirmaProduttore</i> - Il formulario necessita della firma del produttore</li><li><i>InserimentoTrasportoSuccessivo</i> - Il formulario è in carico ad un traportatore e necessita dell'inserimento dei dati del trasporto successivo;             il trasportatore che ha in carico il rifiuto può inserire informazioni aggiuntive (annotazioni, trasbordo parziale, sosta tecnica, trasbordo totale, allegati)             che dovranno essere successivamente firmate</li><li><i>FirmaTrasportatoreSuccessivo</i> - Il formulario necessita della firma del trasportatore successivo al primo che ha in carico il rifiuto</li><li><i>FirmaAnnotazione</i> - Il formulario necessita della firma dell'annotazione da parte del soggetto che l'ha inserita</li><li><i>FirmaTrasbordoParziale</i> - Il formulario necessita della firma del trasportatore che effettua il trasbordo parziale del rifiuto</li><li><i>FirmaTrasbordoTotale</i> - Il formulario necessita della firma del trasportatore che prende in carico il rifiuto con l'operazione di trasbordo totale del rifiuto</li><li><i>FirmaSostaTecnica</i> - Il formulario necessita della firma del trasportatore che ha in carico il rifiuto e ha inserito i dati della sosta tecnica</li><li><i>FirmaAllegato</i> - Il formulario necessita della firma del soggetto che ha aggiunto i dati relativi all'allegato al formulario digitale</li><li><i>InserimentoAccettazione</i> - Il formulario è in carico all'ultimo trasportatore ed è in attesa dell'inserimento dei dati di accettazione da parte del destinatario verso cui è destinato il rifiuto             (a meno di ulteriori informazioni aggiuntive che l'ultimo trasportatore può inserire prima della consegna al destinatario)</li><li><i>FirmaAccettazione</i> - Il formulario necessita della firma del destinatario indicato nei dati di partenza</li><li><i>Accettato</i> - Il formulario è stato accettato dal destinatario ed ha concluso il suo ciclo di vita</li><li><i>RespintoParzialmenteRespinto</i> - Il formulario è stato respinto o parzialmente respinto, il trasportatore che ha in carico il rifiuto può inserire (in accordo con il produttore) i dati              di un nuovo destinatario</li><li><i>FirmaDestinatarioSuccessivo</i> - Il formulario è in attesa della firma dei dati del nuovo destinatario inseriti da parte del trasportatore che ha in carico il rifiuto</li><li><i>FirmaAccettazioneSuccessiva</i> - Il formulario necessita della firma del destinatario successivo a quello indicato nei dati di partenza che ha rifiutato totalmente o parzialmente il rifiuto</li><li><i>FirmaAnnullamento</i> - Il formulario necessita della firma dei dati di annullamento inseriti dal soggetto titolare della vidimazione del numero FIR</li><li><i>Annullato</i> - Il formulario risulta essere stato annullato</li><li><i>Indeterminato</i> - Il formulario è in uno stato non determinato per incoerenza dei dati contenuti</li></ul></p>")
    versione: Optional[StrictInt] = None
    dati_vidimazione: Optional[VidimazioneResult] = None
    num_iscr_sito: Optional[StrictStr] = None
    dati_partenza: Optional[DatiPartenzaResultModel] = None
    dati_trasporto: Optional[conlist(DettaglioFormularioDatiTrasportoInner)] = None
    dati_accettazione: Optional[DatiAccettazioneResultModel] = None
    dati_annotazioni: Optional[conlist(DatiAnnotazioneResultModel)] = None
    dati_allegati: Optional[conlist(DatiAllegatoResultModel)] = None
    dati_annullamento: Optional[DatiAnnullamentoResultModel] = None
    dati_trasbordo_totale: Optional[DatiTrasbordoTotaleResultModel] = None
    dati_trasbordi_parziali: Optional[conlist(DatiTrasbordoParzialeResultModel)] = None
    dati_soste_tecniche: Optional[conlist(DatiSostaTecnicaResultModel)] = None
    dati_destinazioni_successive: Optional[conlist(DatiDestinazioniSuccessiveResultMdodel)] = None
    __properties = ["stato_formulario", "versione", "dati_vidimazione", "num_iscr_sito", "dati_partenza", "dati_trasporto", "dati_accettazione", "dati_annotazioni", "dati_allegati", "dati_annullamento", "dati_trasbordo_totale", "dati_trasbordi_parziali", "dati_soste_tecniche", "dati_destinazioni_successive"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DettaglioFormulario:
        """Create an instance of DettaglioFormulario from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dati_vidimazione
        if self.dati_vidimazione:
            _dict['dati_vidimazione'] = self.dati_vidimazione.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dati_partenza
        if self.dati_partenza:
            _dict['dati_partenza'] = self.dati_partenza.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dati_trasporto (list)
        _items = []
        if self.dati_trasporto:
            for _item in self.dati_trasporto:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dati_trasporto'] = _items
        # override the default output from pydantic by calling `to_dict()` of dati_accettazione
        if self.dati_accettazione:
            _dict['dati_accettazione'] = self.dati_accettazione.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dati_annotazioni (list)
        _items = []
        if self.dati_annotazioni:
            for _item in self.dati_annotazioni:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dati_annotazioni'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_allegati (list)
        _items = []
        if self.dati_allegati:
            for _item in self.dati_allegati:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dati_allegati'] = _items
        # override the default output from pydantic by calling `to_dict()` of dati_annullamento
        if self.dati_annullamento:
            _dict['dati_annullamento'] = self.dati_annullamento.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dati_trasbordo_totale
        if self.dati_trasbordo_totale:
            _dict['dati_trasbordo_totale'] = self.dati_trasbordo_totale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dati_trasbordi_parziali (list)
        _items = []
        if self.dati_trasbordi_parziali:
            for _item in self.dati_trasbordi_parziali:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dati_trasbordi_parziali'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_soste_tecniche (list)
        _items = []
        if self.dati_soste_tecniche:
            for _item in self.dati_soste_tecniche:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dati_soste_tecniche'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dati_destinazioni_successive (list)
        _items = []
        if self.dati_destinazioni_successive:
            for _item in self.dati_destinazioni_successive:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dati_destinazioni_successive'] = _items
        # set to None if versione (nullable) is None
        # and __fields_set__ contains the field
        if self.versione is None and "versione" in self.__fields_set__:
            _dict['versione'] = None

        # set to None if dati_vidimazione (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_vidimazione is None and "dati_vidimazione" in self.__fields_set__:
            _dict['dati_vidimazione'] = None

        # set to None if num_iscr_sito (nullable) is None
        # and __fields_set__ contains the field
        if self.num_iscr_sito is None and "num_iscr_sito" in self.__fields_set__:
            _dict['num_iscr_sito'] = None

        # set to None if dati_partenza (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_partenza is None and "dati_partenza" in self.__fields_set__:
            _dict['dati_partenza'] = None

        # set to None if dati_trasporto (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_trasporto is None and "dati_trasporto" in self.__fields_set__:
            _dict['dati_trasporto'] = None

        # set to None if dati_accettazione (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_accettazione is None and "dati_accettazione" in self.__fields_set__:
            _dict['dati_accettazione'] = None

        # set to None if dati_annotazioni (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_annotazioni is None and "dati_annotazioni" in self.__fields_set__:
            _dict['dati_annotazioni'] = None

        # set to None if dati_allegati (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_allegati is None and "dati_allegati" in self.__fields_set__:
            _dict['dati_allegati'] = None

        # set to None if dati_annullamento (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_annullamento is None and "dati_annullamento" in self.__fields_set__:
            _dict['dati_annullamento'] = None

        # set to None if dati_trasbordo_totale (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_trasbordo_totale is None and "dati_trasbordo_totale" in self.__fields_set__:
            _dict['dati_trasbordo_totale'] = None

        # set to None if dati_trasbordi_parziali (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_trasbordi_parziali is None and "dati_trasbordi_parziali" in self.__fields_set__:
            _dict['dati_trasbordi_parziali'] = None

        # set to None if dati_soste_tecniche (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_soste_tecniche is None and "dati_soste_tecniche" in self.__fields_set__:
            _dict['dati_soste_tecniche'] = None

        # set to None if dati_destinazioni_successive (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_destinazioni_successive is None and "dati_destinazioni_successive" in self.__fields_set__:
            _dict['dati_destinazioni_successive'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DettaglioFormulario:
        """Create an instance of DettaglioFormulario from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DettaglioFormulario.parse_obj(obj)

        _obj = DettaglioFormulario.parse_obj({
            "stato_formulario": obj.get("stato_formulario"),
            "versione": obj.get("versione"),
            "dati_vidimazione": VidimazioneResult.from_dict(obj.get("dati_vidimazione")) if obj.get("dati_vidimazione") is not None else None,
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "dati_partenza": DatiPartenzaResultModel.from_dict(obj.get("dati_partenza")) if obj.get("dati_partenza") is not None else None,
            "dati_trasporto": [DettaglioFormularioDatiTrasportoInner.from_dict(_item) for _item in obj.get("dati_trasporto")] if obj.get("dati_trasporto") is not None else None,
            "dati_accettazione": DatiAccettazioneResultModel.from_dict(obj.get("dati_accettazione")) if obj.get("dati_accettazione") is not None else None,
            "dati_annotazioni": [DatiAnnotazioneResultModel.from_dict(_item) for _item in obj.get("dati_annotazioni")] if obj.get("dati_annotazioni") is not None else None,
            "dati_allegati": [DatiAllegatoResultModel.from_dict(_item) for _item in obj.get("dati_allegati")] if obj.get("dati_allegati") is not None else None,
            "dati_annullamento": DatiAnnullamentoResultModel.from_dict(obj.get("dati_annullamento")) if obj.get("dati_annullamento") is not None else None,
            "dati_trasbordo_totale": DatiTrasbordoTotaleResultModel.from_dict(obj.get("dati_trasbordo_totale")) if obj.get("dati_trasbordo_totale") is not None else None,
            "dati_trasbordi_parziali": [DatiTrasbordoParzialeResultModel.from_dict(_item) for _item in obj.get("dati_trasbordi_parziali")] if obj.get("dati_trasbordi_parziali") is not None else None,
            "dati_soste_tecniche": [DatiSostaTecnicaResultModel.from_dict(_item) for _item in obj.get("dati_soste_tecniche")] if obj.get("dati_soste_tecniche") is not None else None,
            "dati_destinazioni_successive": [DatiDestinazioniSuccessiveResultMdodel.from_dict(_item) for _item in obj.get("dati_destinazioni_successive")] if obj.get("dati_destinazioni_successive") is not None else None
        })
        return _obj


