# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from rentri_formulari.models.indirizzo_model_citta import IndirizzoModelCitta

class IndirizzoModel(BaseModel):
    """
    Indirizzo  # noqa: E501
    """
    citta: IndirizzoModelCitta = Field(...)
    indirizzo: constr(strict=True, max_length=100, min_length=1) = Field(default=..., description="Indirizzo")
    civico: Optional[constr(strict=True, max_length=20)] = Field(default=None, description="Civico")
    cap: Optional[StrictStr] = Field(default=None, description="CAP (se indirizzo italiano 5 cifre, altrimenti da 2 a 20 caratteri)")
    __properties = ["citta", "indirizzo", "civico", "cap"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IndirizzoModel:
        """Create an instance of IndirizzoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of citta
        if self.citta:
            _dict['citta'] = self.citta.to_dict()
        # set to None if civico (nullable) is None
        # and __fields_set__ contains the field
        if self.civico is None and "civico" in self.__fields_set__:
            _dict['civico'] = None

        # set to None if cap (nullable) is None
        # and __fields_set__ contains the field
        if self.cap is None and "cap" in self.__fields_set__:
            _dict['cap'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IndirizzoModel:
        """Create an instance of IndirizzoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IndirizzoModel.parse_obj(obj)

        _obj = IndirizzoModel.parse_obj({
            "citta": IndirizzoModelCitta.from_dict(obj.get("citta")) if obj.get("citta") is not None else None,
            "indirizzo": obj.get("indirizzo"),
            "civico": obj.get("civico"),
            "cap": obj.get("cap")
        })
        return _obj


