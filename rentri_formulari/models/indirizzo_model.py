# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_formulari.models.indirizzo_model_citta import IndirizzoModelCitta
from typing import Optional, Set
from typing_extensions import Self

class IndirizzoModel(BaseModel):
    """
    Indirizzo
    """ # noqa: E501
    citta: IndirizzoModelCitta
    indirizzo: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Indirizzo")
    civico: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="Civico")
    cap: Optional[StrictStr] = Field(default=None, description="CAP (se indirizzo italiano 5 cifre, altrimenti da 2 a 20 caratteri)")
    __properties: ClassVar[List[str]] = ["citta", "indirizzo", "civico", "cap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndirizzoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of citta
        if self.citta:
            _dict['citta'] = self.citta.to_dict()
        # set to None if civico (nullable) is None
        # and model_fields_set contains the field
        if self.civico is None and "civico" in self.model_fields_set:
            _dict['civico'] = None

        # set to None if cap (nullable) is None
        # and model_fields_set contains the field
        if self.cap is None and "cap" in self.model_fields_set:
            _dict['cap'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndirizzoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "citta": IndirizzoModelCitta.from_dict(obj["citta"]) if obj.get("citta") is not None else None,
            "indirizzo": obj.get("indirizzo"),
            "civico": obj.get("civico"),
            "cap": obj.get("cap")
        })
        return _obj


