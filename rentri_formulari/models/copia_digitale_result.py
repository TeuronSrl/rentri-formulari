# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rentri_formulari.models.copia_digitale_ruolo_result import CopiaDigitaleRuoloResult
from typing import Optional, Set
from typing_extensions import Self

class CopiaDigitaleResult(BaseModel):
    """
    Dati della copia del FIR digitale
    """ # noqa: E501
    identificativo: Optional[StrictStr] = Field(default=None, description="Identificativo univco della copia del FIR digitale caricata")
    numero_fir: Optional[StrictStr] = Field(default=None, description="Numero del FIR digitale")
    data_emissione: Optional[datetime] = Field(default=None, description="Data emissione del FIR digitale (formato ISO 8601 UTC)")
    num_iscr_sito: Optional[StrictStr] = Field(default=None, description="Numero iscrizione unitÃ  locale dell'operatore che ha effettuato il caricamento")
    produttore: Optional[CopiaDigitaleRuoloResult] = Field(default=None, description="Dati del produttore a cui si rende disponibile la copia del FIR digitale")
    destinatari: Optional[List[CopiaDigitaleRuoloResult]] = Field(default=None, description="Dati dei destinatari ai quali si rende disponibile la copia del FIR digitale")
    trasportatori: Optional[List[CopiaDigitaleRuoloResult]] = Field(default=None, description="Dati dei trasportatori ai quali si rende disponibile la copia del FIR digitale")
    intermediari: Optional[List[CopiaDigitaleRuoloResult]] = Field(default=None, description="Dati degli intermediari ai quali si rende disponibile la copia del FIR digitale")
    note: Optional[StrictStr] = Field(default=None, description="Eventuali note riguardanti la copia del FIR digitale")
    data_caricamento: Optional[datetime] = Field(default=None, description="Data di caricamento della copia del FIR digitale (formato ISO 8601 UTC)")
    codice_fiscale_caricamento: Optional[StrictStr] = Field(default=None, description="Codice fiscale del soggetto che ha effettuato il caricamento")
    denominazione_caricamento: Optional[StrictStr] = Field(default=None, description="Denominazione del soggetto che ha effettuato il caricamento")
    emesso_da_identificativo: Optional[StrictStr] = Field(default=None, description="Codice fiscale del soggetto intestatario del numero FIR")
    emesso_da_denominazione: Optional[StrictStr] = Field(default=None, description="Denominazione del soggetto intestatario del numero FIR")
    __properties: ClassVar[List[str]] = ["identificativo", "numero_fir", "data_emissione", "num_iscr_sito", "produttore", "destinatari", "trasportatori", "intermediari", "note", "data_caricamento", "codice_fiscale_caricamento", "denominazione_caricamento", "emesso_da_identificativo", "emesso_da_denominazione"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopiaDigitaleResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of produttore
        if self.produttore:
            _dict['produttore'] = self.produttore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destinatari (list)
        _items = []
        if self.destinatari:
            for _item_destinatari in self.destinatari:
                if _item_destinatari:
                    _items.append(_item_destinatari.to_dict())
            _dict['destinatari'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trasportatori (list)
        _items = []
        if self.trasportatori:
            for _item_trasportatori in self.trasportatori:
                if _item_trasportatori:
                    _items.append(_item_trasportatori.to_dict())
            _dict['trasportatori'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in intermediari (list)
        _items = []
        if self.intermediari:
            for _item_intermediari in self.intermediari:
                if _item_intermediari:
                    _items.append(_item_intermediari.to_dict())
            _dict['intermediari'] = _items
        # set to None if identificativo (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo is None and "identificativo" in self.model_fields_set:
            _dict['identificativo'] = None

        # set to None if numero_fir (nullable) is None
        # and model_fields_set contains the field
        if self.numero_fir is None and "numero_fir" in self.model_fields_set:
            _dict['numero_fir'] = None

        # set to None if data_emissione (nullable) is None
        # and model_fields_set contains the field
        if self.data_emissione is None and "data_emissione" in self.model_fields_set:
            _dict['data_emissione'] = None

        # set to None if num_iscr_sito (nullable) is None
        # and model_fields_set contains the field
        if self.num_iscr_sito is None and "num_iscr_sito" in self.model_fields_set:
            _dict['num_iscr_sito'] = None

        # set to None if produttore (nullable) is None
        # and model_fields_set contains the field
        if self.produttore is None and "produttore" in self.model_fields_set:
            _dict['produttore'] = None

        # set to None if destinatari (nullable) is None
        # and model_fields_set contains the field
        if self.destinatari is None and "destinatari" in self.model_fields_set:
            _dict['destinatari'] = None

        # set to None if trasportatori (nullable) is None
        # and model_fields_set contains the field
        if self.trasportatori is None and "trasportatori" in self.model_fields_set:
            _dict['trasportatori'] = None

        # set to None if intermediari (nullable) is None
        # and model_fields_set contains the field
        if self.intermediari is None and "intermediari" in self.model_fields_set:
            _dict['intermediari'] = None

        # set to None if note (nullable) is None
        # and model_fields_set contains the field
        if self.note is None and "note" in self.model_fields_set:
            _dict['note'] = None

        # set to None if data_caricamento (nullable) is None
        # and model_fields_set contains the field
        if self.data_caricamento is None and "data_caricamento" in self.model_fields_set:
            _dict['data_caricamento'] = None

        # set to None if codice_fiscale_caricamento (nullable) is None
        # and model_fields_set contains the field
        if self.codice_fiscale_caricamento is None and "codice_fiscale_caricamento" in self.model_fields_set:
            _dict['codice_fiscale_caricamento'] = None

        # set to None if denominazione_caricamento (nullable) is None
        # and model_fields_set contains the field
        if self.denominazione_caricamento is None and "denominazione_caricamento" in self.model_fields_set:
            _dict['denominazione_caricamento'] = None

        # set to None if emesso_da_identificativo (nullable) is None
        # and model_fields_set contains the field
        if self.emesso_da_identificativo is None and "emesso_da_identificativo" in self.model_fields_set:
            _dict['emesso_da_identificativo'] = None

        # set to None if emesso_da_denominazione (nullable) is None
        # and model_fields_set contains the field
        if self.emesso_da_denominazione is None and "emesso_da_denominazione" in self.model_fields_set:
            _dict['emesso_da_denominazione'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopiaDigitaleResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identificativo": obj.get("identificativo"),
            "numero_fir": obj.get("numero_fir"),
            "data_emissione": obj.get("data_emissione"),
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "produttore": CopiaDigitaleRuoloResult.from_dict(obj["produttore"]) if obj.get("produttore") is not None else None,
            "destinatari": [CopiaDigitaleRuoloResult.from_dict(_item) for _item in obj["destinatari"]] if obj.get("destinatari") is not None else None,
            "trasportatori": [CopiaDigitaleRuoloResult.from_dict(_item) for _item in obj["trasportatori"]] if obj.get("trasportatori") is not None else None,
            "intermediari": [CopiaDigitaleRuoloResult.from_dict(_item) for _item in obj["intermediari"]] if obj.get("intermediari") is not None else None,
            "note": obj.get("note"),
            "data_caricamento": obj.get("data_caricamento"),
            "codice_fiscale_caricamento": obj.get("codice_fiscale_caricamento"),
            "denominazione_caricamento": obj.get("denominazione_caricamento"),
            "emesso_da_identificativo": obj.get("emesso_da_identificativo"),
            "emesso_da_denominazione": obj.get("emesso_da_denominazione")
        })
        return _obj


