# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr
from rentri_formulari.models.dati_firma_result import DatiFirmaResult

class DatiSostaTecnicaResultModel(BaseModel):
    """
    DatiSostaTecnicaResultModel
    """
    data_ora_trasbordo: Optional[datetime] = Field(default=None, description="Formato ISO 8601 UTC")
    trasportatore_id: Optional[StrictInt] = None
    dati_firma: Optional[DatiFirmaResult] = None
    luogo_stazionamento: constr(strict=True, min_length=1) = Field(...)
    data_ora_sospensione: datetime = Field(default=..., description="Formato ISO 8601 UTC")
    data_ora_ripresa: datetime = Field(default=..., description="Formato ISO 8601 UTC")
    __properties = ["data_ora_trasbordo", "trasportatore_id", "dati_firma", "luogo_stazionamento", "data_ora_sospensione", "data_ora_ripresa"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiSostaTecnicaResultModel:
        """Create an instance of DatiSostaTecnicaResultModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dati_firma
        if self.dati_firma:
            _dict['dati_firma'] = self.dati_firma.to_dict()
        # set to None if data_ora_trasbordo (nullable) is None
        # and __fields_set__ contains the field
        if self.data_ora_trasbordo is None and "data_ora_trasbordo" in self.__fields_set__:
            _dict['data_ora_trasbordo'] = None

        # set to None if trasportatore_id (nullable) is None
        # and __fields_set__ contains the field
        if self.trasportatore_id is None and "trasportatore_id" in self.__fields_set__:
            _dict['trasportatore_id'] = None

        # set to None if dati_firma (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_firma is None and "dati_firma" in self.__fields_set__:
            _dict['dati_firma'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiSostaTecnicaResultModel:
        """Create an instance of DatiSostaTecnicaResultModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiSostaTecnicaResultModel.parse_obj(obj)

        _obj = DatiSostaTecnicaResultModel.parse_obj({
            "data_ora_trasbordo": obj.get("data_ora_trasbordo"),
            "trasportatore_id": obj.get("trasportatore_id"),
            "dati_firma": DatiFirmaResult.from_dict(obj.get("dati_firma")) if obj.get("dati_firma") is not None else None,
            "luogo_stazionamento": obj.get("luogo_stazionamento"),
            "data_ora_sospensione": obj.get("data_ora_sospensione"),
            "data_ora_ripresa": obj.get("data_ora_ripresa")
        })
        return _obj


