# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, constr

class DatiTrasportoMarittimoTrasmissioneModel(BaseModel):
    """
    DatiTrasportoMarittimoTrasmissioneModel
    """
    nave: constr(strict=True, min_length=1) = Field(...)
    imdg: Optional[StrictBool] = None
    trasportatore_id: StrictInt = Field(default=..., description="Id del trasportatore definito all'interno dei dati che vengono trasmessi")
    data_ora_inizio_trasporto: datetime = Field(default=..., description="Data e ora inizio trasporto (formato ISO 8601 UTC)")
    annotazioni: Optional[constr(strict=True, max_length=1024)] = Field(default=None, description="Annotazioni")
    __properties = ["trasportatore_id", "data_ora_inizio_trasporto", "annotazioni"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiTrasportoMarittimoTrasmissioneModel:
        """Create an instance of DatiTrasportoMarittimoTrasmissioneModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if annotazioni (nullable) is None
        # and __fields_set__ contains the field
        if self.annotazioni is None and "annotazioni" in self.__fields_set__:
            _dict['annotazioni'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiTrasportoMarittimoTrasmissioneModel:
        """Create an instance of DatiTrasportoMarittimoTrasmissioneModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiTrasportoMarittimoTrasmissioneModel.parse_obj(obj)

        _obj = DatiTrasportoMarittimoTrasmissioneModel.parse_obj({
            "trasportatore_id": obj.get("trasportatore_id"),
            "data_ora_inizio_trasporto": obj.get("data_ora_inizio_trasporto"),
            "annotazioni": obj.get("annotazioni")
        })
        return _obj


