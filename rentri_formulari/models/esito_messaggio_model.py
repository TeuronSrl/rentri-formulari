# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from rentri_formulari.models.esito_messaggio_tipo import EsitoMessaggioTipo

class EsitoMessaggioModel(BaseModel):
    """
    Messaggio di validazione  # noqa: E501
    """
    indice: Optional[StrictInt] = Field(default=None, description="Indice dell'elemento di input relativo al messaggio di validazione")
    campo: Optional[StrictStr] = Field(default=None, description="Campo dell'elemento di input relativo al messaggio di validazione")
    tipo: Optional[EsitoMessaggioTipo] = Field(default=None, description="Tipo del messaggio (avvertimento o errore)")
    codice_messaggio: Optional[StrictStr] = Field(default=None, description="Codice del messaggio")
    parametri: Optional[conlist(Any)] = Field(default=None, description="Parametri del messaggio")
    __properties = ["indice", "campo", "tipo", "codice_messaggio", "parametri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EsitoMessaggioModel:
        """Create an instance of EsitoMessaggioModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if indice (nullable) is None
        # and __fields_set__ contains the field
        if self.indice is None and "indice" in self.__fields_set__:
            _dict['indice'] = None

        # set to None if campo (nullable) is None
        # and __fields_set__ contains the field
        if self.campo is None and "campo" in self.__fields_set__:
            _dict['campo'] = None

        # set to None if codice_messaggio (nullable) is None
        # and __fields_set__ contains the field
        if self.codice_messaggio is None and "codice_messaggio" in self.__fields_set__:
            _dict['codice_messaggio'] = None

        # set to None if parametri (nullable) is None
        # and __fields_set__ contains the field
        if self.parametri is None and "parametri" in self.__fields_set__:
            _dict['parametri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EsitoMessaggioModel:
        """Create an instance of EsitoMessaggioModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EsitoMessaggioModel.parse_obj(obj)

        _obj = EsitoMessaggioModel.parse_obj({
            "indice": obj.get("indice"),
            "campo": obj.get("campo"),
            "tipo": obj.get("tipo"),
            "codice_messaggio": obj.get("codice_messaggio"),
            "parametri": obj.get("parametri")
        })
        return _obj


