# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator
from rentri_formulari.models.dati_partenza_model import DatiPartenzaModel
from rentri_formulari.models.nuovo_formulario_model_dati_trasporto_partenza import NuovoFormularioModelDatiTrasportoPartenza

class NuovoFormularioModel(BaseModel):
    """
    Formulario  # noqa: E501
    """
    num_iscr_sito: constr(strict=True, min_length=1) = Field(default=..., description="Numero iscrizione unità locale di riferimento a cui il formulario verrà associato.  L'unità locale deve appartenere al produttore o al primo trasportatore.")
    dati_partenza: DatiPartenzaModel = Field(default=..., description="Dati iniziali del formulario")
    dati_trasporto_partenza: Optional[NuovoFormularioModelDatiTrasportoPartenza] = None
    __properties = ["num_iscr_sito", "dati_partenza", "dati_trasporto_partenza"]

    @validator('num_iscr_sito')
    def num_iscr_sito_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^OP[0-9]{4}[A-Z0-9]{3}[0-9]{6}-[A-Z]{2}[0-9]{4}$", value):
            raise ValueError(r"must validate the regular expression /^OP[0-9]{4}[A-Z0-9]{3}[0-9]{6}-[A-Z]{2}[0-9]{4}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NuovoFormularioModel:
        """Create an instance of NuovoFormularioModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dati_partenza
        if self.dati_partenza:
            _dict['dati_partenza'] = self.dati_partenza.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dati_trasporto_partenza
        if self.dati_trasporto_partenza:
            _dict['dati_trasporto_partenza'] = self.dati_trasporto_partenza.to_dict()
        # set to None if dati_trasporto_partenza (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_trasporto_partenza is None and "dati_trasporto_partenza" in self.__fields_set__:
            _dict['dati_trasporto_partenza'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NuovoFormularioModel:
        """Create an instance of NuovoFormularioModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NuovoFormularioModel.parse_obj(obj)

        _obj = NuovoFormularioModel.parse_obj({
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "dati_partenza": DatiPartenzaModel.from_dict(obj.get("dati_partenza")) if obj.get("dati_partenza") is not None else None,
            "dati_trasporto_partenza": NuovoFormularioModelDatiTrasportoPartenza.from_dict(obj.get("dati_trasporto_partenza")) if obj.get("dati_trasporto_partenza") is not None else None
        })
        return _obj


