# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_formulari.models.dati_partenza_model import DatiPartenzaModel
from rentri_formulari.models.nuovo_formulario_model_dati_trasporto_partenza import NuovoFormularioModelDatiTrasportoPartenza
from typing import Optional, Set
from typing_extensions import Self

class NuovoFormularioModel(BaseModel):
    """
    Formulario
    """ # noqa: E501
    num_iscr_sito: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Numero iscrizione unità locale di riferimento a cui il formulario verrà associato.  L'unità locale deve appartenere al produttore o al primo trasportatore.")
    dati_partenza: DatiPartenzaModel = Field(description="Dati iniziali del formulario")
    dati_trasporto_partenza: Optional[NuovoFormularioModelDatiTrasportoPartenza] = None
    __properties: ClassVar[List[str]] = ["num_iscr_sito", "dati_partenza", "dati_trasporto_partenza"]

    @field_validator('num_iscr_sito')
    def num_iscr_sito_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^OP[0-9]{4}[A-Z0-9]{3}[0-9]{6}-[A-Z]{2}[0-9]{4}$", value):
            raise ValueError(r"must validate the regular expression /^OP[0-9]{4}[A-Z0-9]{3}[0-9]{6}-[A-Z]{2}[0-9]{4}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NuovoFormularioModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dati_partenza
        if self.dati_partenza:
            _dict['dati_partenza'] = self.dati_partenza.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dati_trasporto_partenza
        if self.dati_trasporto_partenza:
            _dict['dati_trasporto_partenza'] = self.dati_trasporto_partenza.to_dict()
        # set to None if dati_trasporto_partenza (nullable) is None
        # and model_fields_set contains the field
        if self.dati_trasporto_partenza is None and "dati_trasporto_partenza" in self.model_fields_set:
            _dict['dati_trasporto_partenza'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NuovoFormularioModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "dati_partenza": DatiPartenzaModel.from_dict(obj["dati_partenza"]) if obj.get("dati_partenza") is not None else None,
            "dati_trasporto_partenza": NuovoFormularioModelDatiTrasportoPartenza.from_dict(obj["dati_trasporto_partenza"]) if obj.get("dati_trasporto_partenza") is not None else None
        })
        return _obj


