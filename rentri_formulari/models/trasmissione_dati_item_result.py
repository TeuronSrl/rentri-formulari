# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from rentri_formulari.models.stati_trasmissione_dati import StatiTrasmissioneDati
from rentri_formulari.models.tipo_trasmissione import TipoTrasmissione
from rentri_formulari.models.unita_misura import UnitaMisura
from typing import Optional, Set
from typing_extensions import Self

class TrasmissioneDatiItemResult(BaseModel):
    """
    TrasmissioneDatiItemResult
    """ # noqa: E501
    identificativo: Optional[StrictStr] = None
    numero_fir: Optional[StrictStr] = None
    user_name: Optional[StrictStr] = None
    data_trasmissione: Optional[datetime] = Field(default=None, description="Formato ISO 8601 UTC")
    data_emissione: Optional[datetime] = Field(default=None, description="Formato ISO 8601 UTC")
    codice_eer: Optional[StrictStr] = None
    rifiuto_quantita: Optional[Union[StrictFloat, StrictInt]] = None
    rifiuto_unita_misura: Optional[UnitaMisura] = Field(default=None, description="<p>Valori ammessi:<ul style=\"margin:0\"><li><i>kg</i> - Chilogrammi</li><li><i>l</i> - Litri</li></ul></p>")
    tipo: Optional[TipoTrasmissione] = None
    stato: Optional[StatiTrasmissioneDati] = None
    __properties: ClassVar[List[str]] = ["identificativo", "numero_fir", "user_name", "data_trasmissione", "data_emissione", "codice_eer", "rifiuto_quantita", "rifiuto_unita_misura", "tipo", "stato"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrasmissioneDatiItemResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if identificativo (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo is None and "identificativo" in self.model_fields_set:
            _dict['identificativo'] = None

        # set to None if numero_fir (nullable) is None
        # and model_fields_set contains the field
        if self.numero_fir is None and "numero_fir" in self.model_fields_set:
            _dict['numero_fir'] = None

        # set to None if user_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_name is None and "user_name" in self.model_fields_set:
            _dict['user_name'] = None

        # set to None if data_trasmissione (nullable) is None
        # and model_fields_set contains the field
        if self.data_trasmissione is None and "data_trasmissione" in self.model_fields_set:
            _dict['data_trasmissione'] = None

        # set to None if data_emissione (nullable) is None
        # and model_fields_set contains the field
        if self.data_emissione is None and "data_emissione" in self.model_fields_set:
            _dict['data_emissione'] = None

        # set to None if codice_eer (nullable) is None
        # and model_fields_set contains the field
        if self.codice_eer is None and "codice_eer" in self.model_fields_set:
            _dict['codice_eer'] = None

        # set to None if rifiuto_quantita (nullable) is None
        # and model_fields_set contains the field
        if self.rifiuto_quantita is None and "rifiuto_quantita" in self.model_fields_set:
            _dict['rifiuto_quantita'] = None

        # set to None if rifiuto_unita_misura (nullable) is None
        # and model_fields_set contains the field
        if self.rifiuto_unita_misura is None and "rifiuto_unita_misura" in self.model_fields_set:
            _dict['rifiuto_unita_misura'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrasmissioneDatiItemResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identificativo": obj.get("identificativo"),
            "numero_fir": obj.get("numero_fir"),
            "user_name": obj.get("user_name"),
            "data_trasmissione": obj.get("data_trasmissione"),
            "data_emissione": obj.get("data_emissione"),
            "codice_eer": obj.get("codice_eer"),
            "rifiuto_quantita": obj.get("rifiuto_quantita"),
            "rifiuto_unita_misura": obj.get("rifiuto_unita_misura"),
            "tipo": obj.get("tipo"),
            "stato": obj.get("stato")
        })
        return _obj


