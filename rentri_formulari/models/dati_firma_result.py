# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictStr

class DatiFirmaResult(BaseModel):
    """
    DatiFirmaResult
    """
    denominazione_firmatario: Optional[StrictStr] = None
    identificativo_firmatario: Optional[StrictStr] = None
    data_firma: Optional[datetime] = None
    identificativo_utente: Optional[StrictStr] = None
    credentials_id: Optional[StrictStr] = None
    __properties = ["denominazione_firmatario", "identificativo_firmatario", "data_firma", "identificativo_utente", "credentials_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiFirmaResult:
        """Create an instance of DatiFirmaResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if denominazione_firmatario (nullable) is None
        # and __fields_set__ contains the field
        if self.denominazione_firmatario is None and "denominazione_firmatario" in self.__fields_set__:
            _dict['denominazione_firmatario'] = None

        # set to None if identificativo_firmatario (nullable) is None
        # and __fields_set__ contains the field
        if self.identificativo_firmatario is None and "identificativo_firmatario" in self.__fields_set__:
            _dict['identificativo_firmatario'] = None

        # set to None if data_firma (nullable) is None
        # and __fields_set__ contains the field
        if self.data_firma is None and "data_firma" in self.__fields_set__:
            _dict['data_firma'] = None

        # set to None if identificativo_utente (nullable) is None
        # and __fields_set__ contains the field
        if self.identificativo_utente is None and "identificativo_utente" in self.__fields_set__:
            _dict['identificativo_utente'] = None

        # set to None if credentials_id (nullable) is None
        # and __fields_set__ contains the field
        if self.credentials_id is None and "credentials_id" in self.__fields_set__:
            _dict['credentials_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiFirmaResult:
        """Create an instance of DatiFirmaResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiFirmaResult.parse_obj(obj)

        _obj = DatiFirmaResult.parse_obj({
            "denominazione_firmatario": obj.get("denominazione_firmatario"),
            "identificativo_firmatario": obj.get("identificativo_firmatario"),
            "data_firma": obj.get("data_firma"),
            "identificativo_utente": obj.get("identificativo_utente"),
            "credentials_id": obj.get("credentials_id")
        })
        return _obj


