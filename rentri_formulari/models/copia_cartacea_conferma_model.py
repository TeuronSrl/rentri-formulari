# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from rentri_formulari.models.ruolo_conferma_copia_cartacea import RuoloConfermaCopiaCartacea

class CopiaCartaceaConfermaModel(BaseModel):
    """
    CopiaCartaceaConfermaModel
    """
    identificativo: constr(strict=True, min_length=1) = Field(default=..., description="Identificativo univoco della copia del FIR cartaceo")
    num_iscr_sito: Optional[StrictStr] = Field(default=None, description="Eventuale Numero iscrizione unitÃ  locale al quale associare la conferma della copia del FIR cartaceo")
    ruolo: Optional[RuoloConfermaCopiaCartacea] = Field(default=None, description="Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.")
    respingi: Optional[StrictBool] = Field(default=None, description="Effettua l'operazione di annullamento di una precedente conferma")
    __properties = ["identificativo", "num_iscr_sito", "ruolo", "respingi"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CopiaCartaceaConfermaModel:
        """Create an instance of CopiaCartaceaConfermaModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if num_iscr_sito (nullable) is None
        # and __fields_set__ contains the field
        if self.num_iscr_sito is None and "num_iscr_sito" in self.__fields_set__:
            _dict['num_iscr_sito'] = None

        # set to None if respingi (nullable) is None
        # and __fields_set__ contains the field
        if self.respingi is None and "respingi" in self.__fields_set__:
            _dict['respingi'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CopiaCartaceaConfermaModel:
        """Create an instance of CopiaCartaceaConfermaModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CopiaCartaceaConfermaModel.parse_obj(obj)

        _obj = CopiaCartaceaConfermaModel.parse_obj({
            "identificativo": obj.get("identificativo"),
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "ruolo": obj.get("ruolo"),
            "respingi": obj.get("respingi")
        })
        return _obj


