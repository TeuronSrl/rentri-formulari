# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator
from rentri_formulari.models.tipo_trasporto import TipoTrasporto

class DatiTrasportatoreFormularioBaseModel(BaseModel):
    """
    Dati trasportatore  # noqa: E501
    """
    tipo_trasporto: TipoTrasporto = Field(...)
    numero_iscrizione_albo: Optional[constr(strict=True)] = Field(default=None, description="Iscrizione Albo")
    __properties = ["tipo_trasporto", "numero_iscrizione_albo"]

    @validator('numero_iscrizione_albo')
    def numero_iscrizione_albo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([A-Za-z]{2})\/([0-9]{6})$", value):
            raise ValueError(r"must validate the regular expression /^([A-Za-z]{2})\/([0-9]{6})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiTrasportatoreFormularioBaseModel:
        """Create an instance of DatiTrasportatoreFormularioBaseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if numero_iscrizione_albo (nullable) is None
        # and __fields_set__ contains the field
        if self.numero_iscrizione_albo is None and "numero_iscrizione_albo" in self.__fields_set__:
            _dict['numero_iscrizione_albo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiTrasportatoreFormularioBaseModel:
        """Create an instance of DatiTrasportatoreFormularioBaseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiTrasportatoreFormularioBaseModel.parse_obj(obj)

        _obj = DatiTrasportatoreFormularioBaseModel.parse_obj({
            "tipo_trasporto": obj.get("tipo_trasporto"),
            "numero_iscrizione_albo": obj.get("numero_iscrizione_albo")
        })
        return _obj


