# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictStr, constr

class CopiaDigitaleModel(BaseModel):
    """
    CopiaDigitaleModel
    """
    num_iscr_sito: constr(strict=True, min_length=1) = Field(...)
    note: Optional[constr(strict=True, max_length=500)] = None
    xfir: Union[StrictBytes, StrictStr] = Field(default=..., description="Contenuto del file xFIR")
    __properties = ["num_iscr_sito", "note", "xfir"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CopiaDigitaleModel:
        """Create an instance of CopiaDigitaleModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if note (nullable) is None
        # and __fields_set__ contains the field
        if self.note is None and "note" in self.__fields_set__:
            _dict['note'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CopiaDigitaleModel:
        """Create an instance of CopiaDigitaleModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CopiaDigitaleModel.parse_obj(obj)

        _obj = CopiaDigitaleModel.parse_obj({
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "note": obj.get("note"),
            "xfir": obj.get("xfir")
        })
        return _obj


