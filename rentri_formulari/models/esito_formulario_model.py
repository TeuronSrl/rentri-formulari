# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rentri_formulari.models.esito_formulario_model_esito import EsitoFormularioModelEsito
from rentri_formulari.models.esito_messaggio_model import EsitoMessaggioModel
from typing import Optional, Set
from typing_extensions import Self

class EsitoFormularioModel(BaseModel):
    """
    EsitoFormularioModel
    """ # noqa: E501
    esito: Optional[EsitoFormularioModelEsito] = None
    transazione_id: Optional[StrictStr] = Field(default=None, description="Identificativo della transazione asincrona")
    validazione: Optional[List[EsitoMessaggioModel]] = Field(default=None, description="Messaggi di validazione")
    errore: Optional[StrictBool] = None
    tempo_elaborazione: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["esito", "transazione_id", "validazione", "errore", "tempo_elaborazione"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EsitoFormularioModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "errore",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of esito
        if self.esito:
            _dict['esito'] = self.esito.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validazione (list)
        _items = []
        if self.validazione:
            for _item_validazione in self.validazione:
                if _item_validazione:
                    _items.append(_item_validazione.to_dict())
            _dict['validazione'] = _items
        # set to None if esito (nullable) is None
        # and model_fields_set contains the field
        if self.esito is None and "esito" in self.model_fields_set:
            _dict['esito'] = None

        # set to None if validazione (nullable) is None
        # and model_fields_set contains the field
        if self.validazione is None and "validazione" in self.model_fields_set:
            _dict['validazione'] = None

        # set to None if tempo_elaborazione (nullable) is None
        # and model_fields_set contains the field
        if self.tempo_elaborazione is None and "tempo_elaborazione" in self.model_fields_set:
            _dict['tempo_elaborazione'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EsitoFormularioModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "esito": EsitoFormularioModelEsito.from_dict(obj["esito"]) if obj.get("esito") is not None else None,
            "transazione_id": obj.get("transazione_id"),
            "validazione": [EsitoMessaggioModel.from_dict(_item) for _item in obj["validazione"]] if obj.get("validazione") is not None else None,
            "errore": obj.get("errore"),
            "tempo_elaborazione": obj.get("tempo_elaborazione")
        })
        return _obj


