# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from rentri_formulari.models.dati_accettazione_model import DatiAccettazioneModel
from rentri_formulari.models.dati_destinatario_formulario_model1 import DatiDestinatarioFormularioModel1

class DatiDestinazioniSuccessiveTrasmissioniModel(BaseModel):
    """
    DatiDestinazioniSuccessiveTrasmissioniModel
    """
    destinatario: Optional[DatiDestinatarioFormularioModel1] = None
    accettazione: Optional[DatiAccettazioneModel] = Field(default=None, description="Dati accettazione")
    __properties = ["destinatario", "accettazione"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiDestinazioniSuccessiveTrasmissioniModel:
        """Create an instance of DatiDestinazioniSuccessiveTrasmissioniModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of destinatario
        if self.destinatario:
            _dict['destinatario'] = self.destinatario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accettazione
        if self.accettazione:
            _dict['accettazione'] = self.accettazione.to_dict()
        # set to None if destinatario (nullable) is None
        # and __fields_set__ contains the field
        if self.destinatario is None and "destinatario" in self.__fields_set__:
            _dict['destinatario'] = None

        # set to None if accettazione (nullable) is None
        # and __fields_set__ contains the field
        if self.accettazione is None and "accettazione" in self.__fields_set__:
            _dict['accettazione'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiDestinazioniSuccessiveTrasmissioniModel:
        """Create an instance of DatiDestinazioniSuccessiveTrasmissioniModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiDestinazioniSuccessiveTrasmissioniModel.parse_obj(obj)

        _obj = DatiDestinazioniSuccessiveTrasmissioniModel.parse_obj({
            "destinatario": DatiDestinatarioFormularioModel1.from_dict(obj.get("destinatario")) if obj.get("destinatario") is not None else None,
            "accettazione": DatiAccettazioneModel.from_dict(obj.get("accettazione")) if obj.get("accettazione") is not None else None
        })
        return _obj


