# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr, validator

class CittaEsteraModel(BaseModel):
    """
    Città estera  # noqa: E501
    """
    nazione_id: constr(strict=True, max_length=2, min_length=1) = Field(default=..., description="Codice ISO 3166-1 alpha-2 della nazione, in caso di \"IT\" è possibile omettere.  Vengono accettati solo codici previsti dallo standard ISO 3166-1 alpha-2.  Vedi API di codifica: <i>GET /codifiche/v1.0/nazioni</i>")
    nome_citta: constr(strict=True, max_length=100, min_length=1) = Field(default=..., description="Città estera")
    __properties = []

    @validator('nazione_id')
    def nazione_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!.*[Ii][Tt]).*$", value):
            raise ValueError(r"must validate the regular expression /^(?!.*[Ii][Tt]).*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CittaEsteraModel:
        """Create an instance of CittaEsteraModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CittaEsteraModel:
        """Create an instance of CittaEsteraModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CittaEsteraModel.parse_obj(obj)

        _obj = CittaEsteraModel.parse_obj({
        })
        return _obj


