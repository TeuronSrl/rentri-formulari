# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_formulari.models.autorizzazione_model import AutorizzazioneModel
from rentri_formulari.models.indirizzo_model import IndirizzoModel
from rentri_formulari.models.operazioni_recupero_smaltimento import OperazioniRecuperoSmaltimento
from typing import Optional, Set
from typing_extensions import Self

class DatiDestinatarioFormularioModel(BaseModel):
    """
    Dati destinatario
    """ # noqa: E501
    denominazione: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Denominazione del soggetto")
    codice_fiscale: Annotated[str, Field(min_length=5, strict=True, max_length=20)] = Field(description="Codice fiscale del soggetto. In base alla nazione (\"nazione_id\") verranno effettuate le seguenti validazioni: - IT: validazioni formale per codice fiscale personale (16 caratteri) o formato partita IVA (11 cifre decimali) - UE: da 5 a 20 caratteri con successiva validazione formale specifica per il paese UE - Extra UE: da 5 a 20 caratteri")
    nazione_id: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="Codice ISO 3166-1 alpha-2 della nazione, in caso di \"IT\" è possibile omettere.  Vengono accettati solo codici previsti dallo standard ISO 3166-1 alpha-2.  Vedi API di codifica: <i>GET /codifiche/v1.0/nazioni</i>")
    indirizzo: IndirizzoModel = Field(description="Indirizzo")
    autorizzazione: Optional[AutorizzazioneModel] = Field(default=None, description="Autorizzazione.  Il valore è sempre necessario tranne quando l'unità locale del destinatario coincide con quella del produttore ed il rifiuto è stato prodotto fuori dall'unità locale.")
    attivita: Optional[OperazioniRecuperoSmaltimento] = Field(default=None, description="Attività di recupero o smaltimento a destinazione.  Il valore è sempre necessario tranne quando l'unità locale del destinatario coincide con quella del produttore ed il rifiuto è stato prodotto fuori dall'unità locale.<p>Valori ammessi:<ul style=\"margin:0\"><li><i>R1</i> - Utilizzazione principale come combustibile o come altro mezzo per produrre energia</li><li><i>R2</i> - Rigenerazione/recupero di solventi</li><li><i>R3</i> - Riciclo/recupero delle sostanze organiche non utilizzate come solventi</li><li><i>R4</i> - Riciclo/recupero dei metalli e dei composti metallici</li><li><i>R5</i> - Riciclo/recupero di altre sostanze inorganiche</li><li><i>R6</i> - Rigenerazione degli acidi o delle basi</li><li><i>R7</i> - Recupero dei prodotti che servono a captare gli inquinanti</li><li><i>R8</i> - Recupero dei prodotti provenienti dai catalizzatori</li><li><i>R9</i> - Rigenerazione o altri reimpieghi degli oli</li><li><i>R10</i> - Spandimento sul suolo a beneficio dell'agricoltura o dell'ecologia</li><li><i>R11</i> - Utilizzazione di rifiuti ottenuti da una delle operazioni indicate da R1 a R10</li><li><i>R12</i> - Scambio di rifiuti per sottoporli a una delle operazioni indicate da R1 a R11</li><li><i>R13</i> - Messa in riserva di rifiuti per sottoporli a una delle operazioni indicate nei punti da R1 a R12</li><li><i>D1</i> - Deposito sul o nel suolo</li><li><i>D2</i> - Trattamento in ambiente terrestre</li><li><i>D3</i> - Iniezioni in profondità</li><li><i>D4</i> - Lagunaggio</li><li><i>D5</i> - Messa in discarica specialmente allestita</li><li><i>D6</i> - Scarico dei rifiuti solidi nell'ambiente idrico eccetto l'immersione</li><li><i>D7</i> - Immersione, compreso il seppellimento nel sottosuolo marino</li><li><i>D8</i> - Trattamento biologico non specificato altrove nel presente allegato</li><li><i>D9</i> - Trattamento fisico-chimico non specificato altrove nel presente allegato</li><li><i>D10</i> - Incenerimento a terra</li><li><i>D11</i> - Incenerimento in mare</li><li><i>D12</i> - Deposito permanente</li><li><i>D13</i> - Raggruppamento preliminare prima di una delle operazioni di cui ai punti da D1 a D12</li><li><i>D14</i> - Ricondizionamento preliminare prima di una delle operazioni di cui ai punti da D1 a D13</li><li><i>D15</i> - Deposito preliminare prima di una delle operazioni di cui ai punti da D1 a D14</li></ul></p>")
    numero_iscrizione_albo: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Iscrizione Albo")
    __properties: ClassVar[List[str]] = ["autorizzazione", "attivita", "numero_iscrizione_albo"]

    @field_validator('numero_iscrizione_albo')
    def numero_iscrizione_albo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([A-Za-z]{2})\/([0-9]{6})$", value):
            raise ValueError(r"must validate the regular expression /^([A-Za-z]{2})\/([0-9]{6})$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiDestinatarioFormularioModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autorizzazione
        if self.autorizzazione:
            _dict['autorizzazione'] = self.autorizzazione.to_dict()
        # set to None if autorizzazione (nullable) is None
        # and model_fields_set contains the field
        if self.autorizzazione is None and "autorizzazione" in self.model_fields_set:
            _dict['autorizzazione'] = None

        # set to None if attivita (nullable) is None
        # and model_fields_set contains the field
        if self.attivita is None and "attivita" in self.model_fields_set:
            _dict['attivita'] = None

        # set to None if numero_iscrizione_albo (nullable) is None
        # and model_fields_set contains the field
        if self.numero_iscrizione_albo is None and "numero_iscrizione_albo" in self.model_fields_set:
            _dict['numero_iscrizione_albo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiDestinatarioFormularioModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autorizzazione": AutorizzazioneModel.from_dict(obj["autorizzazione"]) if obj.get("autorizzazione") is not None else None,
            "attivita": obj.get("attivita"),
            "numero_iscrizione_albo": obj.get("numero_iscrizione_albo")
        })
        return _obj


