# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, constr
from rentri_formulari.models.dati_trasportatore_trasbordo_model import DatiTrasportatoreTrasbordoModel
from rentri_formulari.models.quantita_model import QuantitaModel

class DatiTrasbordoParzialeTrasmissioneModel(BaseModel):
    """
    DatiTrasbordoParzialeTrasmissioneModel
    """
    trasportatore_id: StrictInt = Field(default=..., description="Id del trasportatore definito all'interno dei dati che vengono trasmessi")
    trasportatore: DatiTrasportatoreTrasbordoModel = Field(default=..., description="Dati trasportatore per il trasbordo parziale")
    numero_fir: constr(strict=True, min_length=1) = Field(...)
    quantita_residua: QuantitaModel = Field(...)
    causale: constr(strict=True, min_length=1) = Field(...)
    __properties = ["trasportatore_id", "trasportatore", "numero_fir", "quantita_residua", "causale"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiTrasbordoParzialeTrasmissioneModel:
        """Create an instance of DatiTrasbordoParzialeTrasmissioneModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of trasportatore
        if self.trasportatore:
            _dict['trasportatore'] = self.trasportatore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantita_residua
        if self.quantita_residua:
            _dict['quantita_residua'] = self.quantita_residua.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiTrasbordoParzialeTrasmissioneModel:
        """Create an instance of DatiTrasbordoParzialeTrasmissioneModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiTrasbordoParzialeTrasmissioneModel.parse_obj(obj)

        _obj = DatiTrasbordoParzialeTrasmissioneModel.parse_obj({
            "trasportatore_id": obj.get("trasportatore_id"),
            "trasportatore": DatiTrasportatoreTrasbordoModel.from_dict(obj.get("trasportatore")) if obj.get("trasportatore") is not None else None,
            "numero_fir": obj.get("numero_fir"),
            "quantita_residua": QuantitaModel.from_dict(obj.get("quantita_residua")) if obj.get("quantita_residua") is not None else None,
            "causale": obj.get("causale")
        })
        return _obj


