# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from rentri_formulari.models.dati_trasportatore_trasbordo_model import DatiTrasportatoreTrasbordoModel
from rentri_formulari.models.quantita_model import QuantitaModel
from typing import Optional, Set
from typing_extensions import Self

class DatiTrasbordoParzialeTrasmissioneModel(BaseModel):
    """
    DatiTrasbordoParzialeTrasmissioneModel
    """ # noqa: E501
    trasportatore_id: StrictInt = Field(description="Id del trasportatore definito all'interno dei dati che vengono trasmessi")
    trasportatore: DatiTrasportatoreTrasbordoModel = Field(description="Dati trasportatore per il trasbordo parziale")
    numero_fir: Annotated[str, Field(min_length=1, strict=True)]
    quantita_residua: QuantitaModel
    causale: Annotated[str, Field(min_length=1, strict=True)]
    __properties: ClassVar[List[str]] = ["trasportatore_id", "trasportatore", "numero_fir", "quantita_residua", "causale"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiTrasbordoParzialeTrasmissioneModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of trasportatore
        if self.trasportatore:
            _dict['trasportatore'] = self.trasportatore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantita_residua
        if self.quantita_residua:
            _dict['quantita_residua'] = self.quantita_residua.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiTrasbordoParzialeTrasmissioneModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trasportatore_id": obj.get("trasportatore_id"),
            "trasportatore": DatiTrasportatoreTrasbordoModel.from_dict(obj["trasportatore"]) if obj.get("trasportatore") is not None else None,
            "numero_fir": obj.get("numero_fir"),
            "quantita_residua": QuantitaModel.from_dict(obj["quantita_residua"]) if obj.get("quantita_residua") is not None else None,
            "causale": obj.get("causale")
        })
        return _obj


