# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr
from rentri_formulari.models.dati_firma_result import DatiFirmaResult

class DatiAnnullamentoResultModel(BaseModel):
    """
    DatiAnnullamentoResultModel
    """
    dati_firma: Optional[DatiFirmaResult] = None
    note: constr(strict=True, max_length=1024, min_length=1) = Field(default=..., description="Note di annullamento")
    codice_fiscale_soggetto: constr(strict=True, max_length=20, min_length=5) = Field(default=..., description="Codice fiscale del soggetto.")
    __properties = ["dati_firma", "note", "codice_fiscale_soggetto"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiAnnullamentoResultModel:
        """Create an instance of DatiAnnullamentoResultModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dati_firma
        if self.dati_firma:
            _dict['dati_firma'] = self.dati_firma.to_dict()
        # set to None if dati_firma (nullable) is None
        # and __fields_set__ contains the field
        if self.dati_firma is None and "dati_firma" in self.__fields_set__:
            _dict['dati_firma'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiAnnullamentoResultModel:
        """Create an instance of DatiAnnullamentoResultModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiAnnullamentoResultModel.parse_obj(obj)

        _obj = DatiAnnullamentoResultModel.parse_obj({
            "dati_firma": DatiFirmaResult.from_dict(obj.get("dati_firma")) if obj.get("dati_firma") is not None else None,
            "note": obj.get("note"),
            "codice_fiscale_soggetto": obj.get("codice_fiscale_soggetto")
        })
        return _obj


