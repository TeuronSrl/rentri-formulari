# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from rentri_formulari.models.esito_carica_copia_cartacea_model import EsitoCaricaCopiaCartaceaModel
from rentri_formulari.models.esito_messaggio_model import EsitoMessaggioModel

class EsitoCopiaCartaceaModel(BaseModel):
    """
    EsitoCopiaCartaceaModel
    """
    esito: Optional[EsitoCaricaCopiaCartaceaModel] = Field(default=None, description="Esito")
    transazione_id: Optional[StrictStr] = Field(default=None, description="Identificativo della transazione asincrona")
    validazione: Optional[conlist(EsitoMessaggioModel)] = Field(default=None, description="Messaggi di validazione")
    errore: Optional[StrictBool] = None
    tempo_elaborazione: Optional[StrictStr] = None
    __properties = ["esito", "transazione_id", "validazione", "errore", "tempo_elaborazione"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EsitoCopiaCartaceaModel:
        """Create an instance of EsitoCopiaCartaceaModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "errore",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of esito
        if self.esito:
            _dict['esito'] = self.esito.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validazione (list)
        _items = []
        if self.validazione:
            for _item in self.validazione:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validazione'] = _items
        # set to None if esito (nullable) is None
        # and __fields_set__ contains the field
        if self.esito is None and "esito" in self.__fields_set__:
            _dict['esito'] = None

        # set to None if validazione (nullable) is None
        # and __fields_set__ contains the field
        if self.validazione is None and "validazione" in self.__fields_set__:
            _dict['validazione'] = None

        # set to None if tempo_elaborazione (nullable) is None
        # and __fields_set__ contains the field
        if self.tempo_elaborazione is None and "tempo_elaborazione" in self.__fields_set__:
            _dict['tempo_elaborazione'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EsitoCopiaCartaceaModel:
        """Create an instance of EsitoCopiaCartaceaModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EsitoCopiaCartaceaModel.parse_obj(obj)

        _obj = EsitoCopiaCartaceaModel.parse_obj({
            "esito": EsitoCaricaCopiaCartaceaModel.from_dict(obj.get("esito")) if obj.get("esito") is not None else None,
            "transazione_id": obj.get("transazione_id"),
            "validazione": [EsitoMessaggioModel.from_dict(_item) for _item in obj.get("validazione")] if obj.get("validazione") is not None else None,
            "errore": obj.get("errore"),
            "tempo_elaborazione": obj.get("tempo_elaborazione")
        })
        return _obj


