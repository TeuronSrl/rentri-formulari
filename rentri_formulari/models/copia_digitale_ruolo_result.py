# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CopiaDigitaleRuoloResult(BaseModel):
    """
    CopiaDigitaleRuoloResult
    """
    codice_fiscale: Optional[StrictStr] = Field(default=None, description="Codice fiscale del soggetto a cui viene resa disponibile la copia del FIR digitale")
    denominazione: Optional[StrictStr] = Field(default=None, description="Denominazione del soggetto a cui viene resa disponibile la copia del FIR digitale")
    num_iscr_sito: Optional[StrictStr] = Field(default=None, description="Numero iscrizione unitÃ  locale del soggetto a cui viene resa disponibile la copia del FIR digitale")
    data_conferma: Optional[datetime] = Field(default=None, description="Data dell'eventuale avvenuta conferma da parte del soggetto (formato ISO 8601 UTC)")
    via: Optional[StrictStr] = Field(default=None, description="Via del soggetto a cui viene resa disponibile la copia del FIR digitale")
    civico: Optional[StrictStr] = Field(default=None, description="Civico del soggetto a cui viene resa disponibile la copia del FIR digitale")
    comune_id: Optional[StrictStr] = Field(default=None, description="Codice ISTAT del comune del soggetto a cui viene resa disponibile la copia del FIR digitale")
    __properties = ["codice_fiscale", "denominazione", "num_iscr_sito", "data_conferma", "via", "civico", "comune_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CopiaDigitaleRuoloResult:
        """Create an instance of CopiaDigitaleRuoloResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if codice_fiscale (nullable) is None
        # and __fields_set__ contains the field
        if self.codice_fiscale is None and "codice_fiscale" in self.__fields_set__:
            _dict['codice_fiscale'] = None

        # set to None if denominazione (nullable) is None
        # and __fields_set__ contains the field
        if self.denominazione is None and "denominazione" in self.__fields_set__:
            _dict['denominazione'] = None

        # set to None if num_iscr_sito (nullable) is None
        # and __fields_set__ contains the field
        if self.num_iscr_sito is None and "num_iscr_sito" in self.__fields_set__:
            _dict['num_iscr_sito'] = None

        # set to None if data_conferma (nullable) is None
        # and __fields_set__ contains the field
        if self.data_conferma is None and "data_conferma" in self.__fields_set__:
            _dict['data_conferma'] = None

        # set to None if via (nullable) is None
        # and __fields_set__ contains the field
        if self.via is None and "via" in self.__fields_set__:
            _dict['via'] = None

        # set to None if civico (nullable) is None
        # and __fields_set__ contains the field
        if self.civico is None and "civico" in self.__fields_set__:
            _dict['civico'] = None

        # set to None if comune_id (nullable) is None
        # and __fields_set__ contains the field
        if self.comune_id is None and "comune_id" in self.__fields_set__:
            _dict['comune_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CopiaDigitaleRuoloResult:
        """Create an instance of CopiaDigitaleRuoloResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CopiaDigitaleRuoloResult.parse_obj(obj)

        _obj = CopiaDigitaleRuoloResult.parse_obj({
            "codice_fiscale": obj.get("codice_fiscale"),
            "denominazione": obj.get("denominazione"),
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "data_conferma": obj.get("data_conferma"),
            "via": obj.get("via"),
            "civico": obj.get("civico"),
            "comune_id": obj.get("comune_id")
        })
        return _obj


