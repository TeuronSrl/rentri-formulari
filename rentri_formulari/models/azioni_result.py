# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from rentri_formulari.models.operazione import Operazione
from rentri_formulari.models.stato_formulario import StatoFormulario
from typing import Optional, Set
from typing_extensions import Self

class AzioniResult(BaseModel):
    """
    AzioniResult
    """ # noqa: E501
    versione: Optional[StrictInt] = None
    stato: Optional[StatoFormulario] = Field(default=None, description="Stati del FIR digitale<p>Valori ammessi:<ul style=\"margin:0\"><li><i>InserimentoQuantita</i> - Il formulario necessita dei dati sulla quantità del rifiuto</li><li><i>InserimentoQuantitaTrasportoIniziale</i> - Il formulario necessita dei dati sulla quantità del rifiuto e dei dati del trasporto iniziale</li><li><i>InserimentoTrasportoIniziale</i> - Il formulario necessita dei dati del trasporto iniziale</li><li><i>FirmaProduttoreTrasportatoreIniziale</i> - Il formulario necessita della firma del produttore e del trasportatore iniziale</li><li><i>FirmaTrasportatoreIniziale</i> - Il formulario necessita della firma del trasportatore iniziale</li><li><i>FirmaProduttore</i> - Il formulario necessita della firma del produttore</li><li><i>InserimentoTrasportoSuccessivo</i> - Il formulario è in carico ad un traportatore e necessita dell'inserimento dei dati del trasporto successivo;             il trasportatore che ha in carico il rifiuto può inserire informazioni aggiuntive (annotazioni, trasbordo parziale, sosta tecnica, trasbordo totale, allegati)             che dovranno essere successivamente firmate</li><li><i>FirmaTrasportatoreSuccessivo</i> - Il formulario necessita della firma del trasportatore successivo al primo che ha in carico il rifiuto</li><li><i>FirmaAnnotazione</i> - Il formulario necessita della firma dell'annotazione da parte del soggetto che l'ha inserita</li><li><i>FirmaTrasbordoParziale</i> - Il formulario necessita della firma del trasportatore che effettua il trasbordo parziale del rifiuto</li><li><i>FirmaTrasbordoTotale</i> - Il formulario necessita della firma del trasportatore che prende in carico il rifiuto con l'operazione di trasbordo totale del rifiuto</li><li><i>FirmaSostaTecnica</i> - Il formulario necessita della firma del trasportatore che ha in carico il rifiuto e ha inserito i dati della sosta tecnica</li><li><i>FirmaAllegato</i> - Il formulario necessita della firma del soggetto che ha aggiunto i dati relativi all'allegato al formulario digitale</li><li><i>InserimentoAccettazione</i> - Il formulario è in carico all'ultimo trasportatore ed è in attesa dell'inserimento dei dati di accettazione da parte del destinatario verso cui è destinato il rifiuto             (a meno di ulteriori informazioni aggiuntive che l'ultimo trasportatore può inserire prima della consegna al destinatario)</li><li><i>FirmaAccettazione</i> - Il formulario necessita della firma del destinatario indicato nei dati di partenza</li><li><i>Accettato</i> - Il formulario è stato accettato dal destinatario ed ha concluso il suo ciclo di vita</li><li><i>RespintoParzialmenteRespinto</i> - Il formulario è stato respinto o parzialmente respinto, il trasportatore che ha in carico il rifiuto può inserire (in accordo con il produttore) i dati              di un nuovo destinatario</li><li><i>FirmaDestinatarioSuccessivo</i> - Il formulario è in attesa della firma dei dati del nuovo destinatario inseriti da parte del trasportatore che ha in carico il rifiuto</li><li><i>FirmaAccettazioneSuccessiva</i> - Il formulario necessita della firma del destinatario successivo a quello indicato nei dati di partenza che ha rifiutato totalmente o parzialmente il rifiuto</li><li><i>FirmaAnnullamento</i> - Il formulario necessita della firma dei dati di annullamento inseriti dal soggetto titolare della vidimazione del numero FIR</li><li><i>Annullato</i> - Il formulario risulta essere stato annullato</li><li><i>Indeterminato</i> - Il formulario è in uno stato non determinato per incoerenza dei dati contenuti</li></ul></p>")
    azioni: Optional[List[Operazione]] = Field(default=None, description="Elenco delle operazioni e specifici soggetti abilitati ad eseguirle effettuabili sul formulario in funzione dello stato in cui si trova")
    __properties: ClassVar[List[str]] = ["versione", "stato", "azioni"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzioniResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if versione (nullable) is None
        # and model_fields_set contains the field
        if self.versione is None and "versione" in self.model_fields_set:
            _dict['versione'] = None

        # set to None if azioni (nullable) is None
        # and model_fields_set contains the field
        if self.azioni is None and "azioni" in self.model_fields_set:
            _dict['azioni'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzioniResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "versione": obj.get("versione"),
            "stato": obj.get("stato"),
            "azioni": obj.get("azioni")
        })
        return _obj


