# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, constr, validator
from rentri_formulari.models.autorizzazione_model import AutorizzazioneModel
from rentri_formulari.models.indirizzo_model import IndirizzoModel

class DatiProduttoreFormularioModel(BaseModel):
    """
    Dati produttore  # noqa: E501
    """
    denominazione: constr(strict=True, min_length=1) = Field(default=..., description="Denominazione del soggetto")
    codice_fiscale: constr(strict=True, max_length=20, min_length=5) = Field(default=..., description="Codice fiscale del soggetto. In base alla nazione (\"nazione_id\") verranno effettuate le seguenti validazioni: - IT: validazioni formale per codice fiscale personale (16 caratteri) o formato partita IVA (11 cifre decimali) - UE: da 5 a 20 caratteri con successiva validazione formale specifica per il paese UE - Extra UE: da 5 a 20 caratteri")
    nazione_id: Optional[constr(strict=True, max_length=2)] = Field(default=None, description="Codice ISO 3166-1 alpha-2 della nazione, in caso di \"IT\" è possibile omettere.  Vengono accettati solo codici previsti dallo standard ISO 3166-1 alpha-2.  Vedi API di codifica: <i>GET /codifiche/v1.0/nazioni</i>")
    indirizzo: IndirizzoModel = Field(default=..., description="Indirizzo")
    luogo_produzione: Optional[IndirizzoModel] = Field(default=None, description="Luogo di produzione se diverso da indirizzo")
    autorizzazione: Optional[AutorizzazioneModel] = Field(default=None, description="Autorizzazione")
    detentore: Optional[StrictBool] = Field(default=None, description="Specifica se il dato del produttore è riferito al detentore del rifiuto")
    numero_iscrizione_albo: Optional[constr(strict=True)] = Field(default=None, description="Iscrizione Albo")
    __properties = ["luogo_produzione", "autorizzazione", "detentore", "numero_iscrizione_albo"]

    @validator('numero_iscrizione_albo')
    def numero_iscrizione_albo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([A-Za-z]{2})\/([0-9]{6})$", value):
            raise ValueError(r"must validate the regular expression /^([A-Za-z]{2})\/([0-9]{6})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiProduttoreFormularioModel:
        """Create an instance of DatiProduttoreFormularioModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of luogo_produzione
        if self.luogo_produzione:
            _dict['luogo_produzione'] = self.luogo_produzione.to_dict()
        # override the default output from pydantic by calling `to_dict()` of autorizzazione
        if self.autorizzazione:
            _dict['autorizzazione'] = self.autorizzazione.to_dict()
        # set to None if luogo_produzione (nullable) is None
        # and __fields_set__ contains the field
        if self.luogo_produzione is None and "luogo_produzione" in self.__fields_set__:
            _dict['luogo_produzione'] = None

        # set to None if autorizzazione (nullable) is None
        # and __fields_set__ contains the field
        if self.autorizzazione is None and "autorizzazione" in self.__fields_set__:
            _dict['autorizzazione'] = None

        # set to None if detentore (nullable) is None
        # and __fields_set__ contains the field
        if self.detentore is None and "detentore" in self.__fields_set__:
            _dict['detentore'] = None

        # set to None if numero_iscrizione_albo (nullable) is None
        # and __fields_set__ contains the field
        if self.numero_iscrizione_albo is None and "numero_iscrizione_albo" in self.__fields_set__:
            _dict['numero_iscrizione_albo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiProduttoreFormularioModel:
        """Create an instance of DatiProduttoreFormularioModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiProduttoreFormularioModel.parse_obj(obj)

        _obj = DatiProduttoreFormularioModel.parse_obj({
            "luogo_produzione": IndirizzoModel.from_dict(obj.get("luogo_produzione")) if obj.get("luogo_produzione") is not None else None,
            "autorizzazione": AutorizzazioneModel.from_dict(obj.get("autorizzazione")) if obj.get("autorizzazione") is not None else None,
            "detentore": obj.get("detentore"),
            "numero_iscrizione_albo": obj.get("numero_iscrizione_albo")
        })
        return _obj


