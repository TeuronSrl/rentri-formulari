# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictStr, conint, constr, validator

from typing import Any, List, Optional

from rentri_formulari.models.dati_trasmissione_formulario_model import DatiTrasmissioneFormularioModel
from rentri_formulari.models.estrai_dati_xfir_model import EstraiDatiXfirModel
from rentri_formulari.models.transazione_model import TransazioneModel
from rentri_formulari.models.trasmissione_dati_item_result import TrasmissioneDatiItemResult
from rentri_formulari.models.trasmissione_dati_result import TrasmissioneDatiResult
from rentri_formulari.models.trasmissione_formulario_response import TrasmissioneFormularioResponse

from rentri_formulari.api_client import ApiClient
from rentri_formulari.api_response import ApiResponse
from rentri_formulari.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TrasmissioneDatiSoggettoDelegatoApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_get(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni")], numero_fir : Optional[StrictStr] = None, data_trasmissione_da : Annotated[Optional[datetime], Field(description="Formato ISO 8601 UTC")] = None, data_trasmissione_a : Annotated[Optional[datetime], Field(description="Formato ISO 8601 UTC")] = None, codice_eer : Optional[StrictStr] = None, tipo : Optional[Any] = None, stato : Optional[Any] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize")] = None, **kwargs) -> List[TrasmissioneDatiItemResult]:  # noqa: E501
        """Trasmissioni effettuate  # noqa: E501

        Ottiene la lista delle trasmissioni di dati di FIR digitali effettuate per l'unità locale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_get(num_iscr_sito, numero_fir, data_trasmissione_da, data_trasmissione_a, codice_eer, tipo, stato, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni (required)
        :type num_iscr_sito: str
        :param numero_fir:
        :type numero_fir: str
        :param data_trasmissione_da: Formato ISO 8601 UTC
        :type data_trasmissione_da: datetime
        :param data_trasmissione_a: Formato ISO 8601 UTC
        :type data_trasmissione_a: datetime
        :param codice_eer:
        :type codice_eer: str
        :param tipo:
        :type tipo: TipoTrasmissione
        :param stato:
        :type stato: StatiTrasmissioneDati
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[TrasmissioneDatiItemResult]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the trasmissioni_soggetto_delegato_num_iscr_sito_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trasmissioni_soggetto_delegato_num_iscr_sito_get_with_http_info(num_iscr_sito, numero_fir, data_trasmissione_da, data_trasmissione_a, codice_eer, tipo, stato, paging_page, paging_page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_get_with_http_info(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni")], numero_fir : Optional[StrictStr] = None, data_trasmissione_da : Annotated[Optional[datetime], Field(description="Formato ISO 8601 UTC")] = None, data_trasmissione_a : Annotated[Optional[datetime], Field(description="Formato ISO 8601 UTC")] = None, codice_eer : Optional[StrictStr] = None, tipo : Optional[Any] = None, stato : Optional[Any] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Trasmissioni effettuate  # noqa: E501

        Ottiene la lista delle trasmissioni di dati di FIR digitali effettuate per l'unità locale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_get_with_http_info(num_iscr_sito, numero_fir, data_trasmissione_da, data_trasmissione_a, codice_eer, tipo, stato, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni (required)
        :type num_iscr_sito: str
        :param numero_fir:
        :type numero_fir: str
        :param data_trasmissione_da: Formato ISO 8601 UTC
        :type data_trasmissione_da: datetime
        :param data_trasmissione_a: Formato ISO 8601 UTC
        :type data_trasmissione_a: datetime
        :param codice_eer:
        :type codice_eer: str
        :param tipo:
        :type tipo: TipoTrasmissione
        :param stato:
        :type stato: StatiTrasmissioneDati
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[TrasmissioneDatiItemResult], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'numero_fir',
            'data_trasmissione_da',
            'data_trasmissione_a',
            'codice_eer',
            'tipo',
            'stato',
            'paging_page',
            'paging_page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trasmissioni_soggetto_delegato_num_iscr_sito_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']


        # process the query parameters
        _query_params = []
        if _params.get('numero_fir') is not None:  # noqa: E501
            _query_params.append(('numero_fir', _params['numero_fir']))

        if _params.get('data_trasmissione_da') is not None:  # noqa: E501
            if isinstance(_params['data_trasmissione_da'], datetime):
                _query_params.append(('data_trasmissione_da', _params['data_trasmissione_da'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('data_trasmissione_da', _params['data_trasmissione_da']))

        if _params.get('data_trasmissione_a') is not None:  # noqa: E501
            if isinstance(_params['data_trasmissione_a'], datetime):
                _query_params.append(('data_trasmissione_a', _params['data_trasmissione_a'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('data_trasmissione_a', _params['data_trasmissione_a']))

        if _params.get('codice_eer') is not None:  # noqa: E501
            _query_params.append(('codice_eer', _params['codice_eer']))

        if _params.get('tipo') is not None:  # noqa: E501
            _query_params.append(('tipo', _params['tipo'].value))

        if _params.get('stato') is not None:  # noqa: E501
            _query_params.append(('stato', _params['stato'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['paging_page'] is not None:
            _header_params['Paging-Page'] = _params['paging_page']

        if _params['paging_page_size'] is not None:
            _header_params['Paging-PageSize'] = _params['paging_page_size']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[TrasmissioneDatiItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/trasmissioni/soggetto-delegato/{num_iscr_sito}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_annulla_delete(self, num_iscr_sito : constr(strict=True), identificativo : StrictStr, **kwargs) -> None:  # noqa: E501
        """Annulla trasmissione di dati del FIR digitale  # noqa: E501

        Pone in stato \"annullata\" la trasmissione di dati del FIR digitale specificata.  L'operazione non è reversibile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_annulla_delete(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito:  (required)
        :type num_iscr_sito: str
        :param identificativo:  (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_annulla_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_annulla_delete_with_http_info(num_iscr_sito, identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_annulla_delete_with_http_info(self, num_iscr_sito : constr(strict=True), identificativo : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Annulla trasmissione di dati del FIR digitale  # noqa: E501

        Pone in stato \"annullata\" la trasmissione di dati del FIR digitale specificata.  L'operazione non è reversibile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_annulla_delete_with_http_info(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito:  (required)
        :type num_iscr_sito: str
        :param identificativo:  (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_annulla_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/trasmissioni/soggetto-delegato/{num_iscr_sito}/{identificativo}/annulla', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_get(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della trasmissione")], **kwargs) -> TrasmissioneDatiResult:  # noqa: E501
        """Dettaglio trasmissione  # noqa: E501

        Recupera le informazioni di dettaglio della trasmissione di dati di FIR digitale corrispondente all'identificativo specificato  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_get(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della trasmissione (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TrasmissioneDatiResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_get_with_http_info(num_iscr_sito, identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_get_with_http_info(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della trasmissione")], **kwargs) -> ApiResponse:  # noqa: E501
        """Dettaglio trasmissione  # noqa: E501

        Recupera le informazioni di dettaglio della trasmissione di dati di FIR digitale corrispondente all'identificativo specificato  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_get_with_http_info(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione dell'unità locale per cui si vogliono recuperare le trasmissioni (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della trasmissione (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TrasmissioneDatiResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trasmissioni_soggetto_delegato_num_iscr_sito_identificativo_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "TrasmissioneDatiResult",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/trasmissioni/soggetto-delegato/{num_iscr_sito}/{identificativo}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_numero_fir_estrai_post(self, num_iscr_sito : constr(strict=True), numero_fir : constr(strict=True), estrai_dati_xfir_model : EstraiDatiXfirModel, x_reply_to : Optional[StrictStr] = None, **kwargs) -> TransazioneModel:  # noqa: E501
        """🔁[ASYNC] Estrazione dati per FIR digitale  # noqa: E501

        Effettua l'estrazione dei dati che devono essere trasmessi dal file del FIR digitale che viene specificato tra i dati della richiesta.  Il file del FIR digitale inviato deve essere firmato digitalmente e deve essere valido secondo le regole definite dalle specifiche xFIR e verificabile dalla specifica funzione di validazione definita dall'endpoint dell'API<br/>Se viene specificato un URL nell'header X-ReplyTo, al termine dell'elaborazione dei dati, il fruitore riceverà una notifica con l'esito dell'elaborazione all'URL specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_numero_fir_estrai_post(num_iscr_sito, numero_fir, estrai_dati_xfir_model, x_reply_to, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito:  (required)
        :type num_iscr_sito: str
        :param numero_fir:  (required)
        :type numero_fir: str
        :param estrai_dati_xfir_model:  (required)
        :type estrai_dati_xfir_model: EstraiDatiXfirModel
        :param x_reply_to: 
        :type x_reply_to: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransazioneModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the trasmissioni_soggetto_delegato_num_iscr_sito_numero_fir_estrai_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trasmissioni_soggetto_delegato_num_iscr_sito_numero_fir_estrai_post_with_http_info(num_iscr_sito, numero_fir, estrai_dati_xfir_model, x_reply_to, **kwargs)  # noqa: E501

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_numero_fir_estrai_post_with_http_info(self, num_iscr_sito : constr(strict=True), numero_fir : constr(strict=True), estrai_dati_xfir_model : EstraiDatiXfirModel, x_reply_to : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """🔁[ASYNC] Estrazione dati per FIR digitale  # noqa: E501

        Effettua l'estrazione dei dati che devono essere trasmessi dal file del FIR digitale che viene specificato tra i dati della richiesta.  Il file del FIR digitale inviato deve essere firmato digitalmente e deve essere valido secondo le regole definite dalle specifiche xFIR e verificabile dalla specifica funzione di validazione definita dall'endpoint dell'API<br/>Se viene specificato un URL nell'header X-ReplyTo, al termine dell'elaborazione dei dati, il fruitore riceverà una notifica con l'esito dell'elaborazione all'URL specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_numero_fir_estrai_post_with_http_info(num_iscr_sito, numero_fir, estrai_dati_xfir_model, x_reply_to, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito:  (required)
        :type num_iscr_sito: str
        :param numero_fir:  (required)
        :type numero_fir: str
        :param estrai_dati_xfir_model:  (required)
        :type estrai_dati_xfir_model: EstraiDatiXfirModel
        :param x_reply_to: 
        :type x_reply_to: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransazioneModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'numero_fir',
            'estrai_dati_xfir_model',
            'x_reply_to'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trasmissioni_soggetto_delegato_num_iscr_sito_numero_fir_estrai_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']

        if _params['numero_fir'] is not None:
            _path_params['numero_fir'] = _params['numero_fir']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_reply_to'] is not None:
            _header_params['X-ReplyTo'] = _params['x_reply_to']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['estrai_dati_xfir_model'] is not None:
            _body_params = _params['estrai_dati_xfir_model']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '202': "TransazioneModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/trasmissioni/soggetto-delegato/{num_iscr_sito}/{numero_fir}/estrai', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_post(self, num_iscr_sito : constr(strict=True), dati_trasmissione_formulario_model : DatiTrasmissioneFormularioModel, **kwargs) -> TrasmissioneFormularioResponse:  # noqa: E501
        """Trasmette i dati del FIR digitale  # noqa: E501

        Effettua la trasmissione dei dati estratti da un FIR digitale riferibili all'unità locale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_post(num_iscr_sito, dati_trasmissione_formulario_model, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito:  (required)
        :type num_iscr_sito: str
        :param dati_trasmissione_formulario_model:  (required)
        :type dati_trasmissione_formulario_model: DatiTrasmissioneFormularioModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TrasmissioneFormularioResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the trasmissioni_soggetto_delegato_num_iscr_sito_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trasmissioni_soggetto_delegato_num_iscr_sito_post_with_http_info(num_iscr_sito, dati_trasmissione_formulario_model, **kwargs)  # noqa: E501

    @validate_arguments
    def trasmissioni_soggetto_delegato_num_iscr_sito_post_with_http_info(self, num_iscr_sito : constr(strict=True), dati_trasmissione_formulario_model : DatiTrasmissioneFormularioModel, **kwargs) -> ApiResponse:  # noqa: E501
        """Trasmette i dati del FIR digitale  # noqa: E501

        Effettua la trasmissione dei dati estratti da un FIR digitale riferibili all'unità locale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trasmissioni_soggetto_delegato_num_iscr_sito_post_with_http_info(num_iscr_sito, dati_trasmissione_formulario_model, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito:  (required)
        :type num_iscr_sito: str
        :param dati_trasmissione_formulario_model:  (required)
        :type dati_trasmissione_formulario_model: DatiTrasmissioneFormularioModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TrasmissioneFormularioResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'dati_trasmissione_formulario_model'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trasmissioni_soggetto_delegato_num_iscr_sito_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dati_trasmissione_formulario_model'] is not None:
            _body_params = _params['dati_trasmissione_formulario_model']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "TrasmissioneFormularioResponse",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/trasmissioni/soggetto-delegato/{num_iscr_sito}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
