# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from rentri_formulari.models.copia_digitale_item_result import CopiaDigitaleItemResult
from rentri_formulari.models.copia_digitale_model import CopiaDigitaleModel
from rentri_formulari.models.copia_digitale_result import CopiaDigitaleResult
from rentri_formulari.models.downloadable_base_response import DownloadableBaseResponse
from rentri_formulari.models.esito_copia_digitale_model import EsitoCopiaDigitaleModel
from rentri_formulari.models.transazione_model import TransazioneModel

from rentri_formulari.api_client import ApiClient, RequestSerialized
from rentri_formulari.api_response import ApiResponse
from rentri_formulari.rest import RESTResponseType


class CopiaFIRDigitaleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_get(
        self,
        num_iscr_sito: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")],
        numero_fir: Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None,
        tipo_accettazione: Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None,
        confermate: Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None,
        comune_id: Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None,
        data_emissione_da: Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        data_emissione_a: Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        codice_eer: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8)]], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None,
        ruolo: Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None,
        paging_page: Annotated[Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]], Field(description="Valore per l'header Paging-Page")] = None,
        paging_page_size: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Valore per l'header Paging-PageSize")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[CopiaDigitaleItemResult]:
        """Copie FIR digitali disponibili

        Ottiene la lista delle copie dei FIR digitali caricate e disponibili per il soggetto specificato.

        :param num_iscr_sito: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_get_serialize(
            num_iscr_sito=num_iscr_sito,
            numero_fir=numero_fir,
            tipo_accettazione=tipo_accettazione,
            confermate=confermate,
            comune_id=comune_id,
            data_emissione_da=data_emissione_da,
            data_emissione_a=data_emissione_a,
            codice_eer=codice_eer,
            ruolo=ruolo,
            paging_page=paging_page,
            paging_page_size=paging_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_get_with_http_info(
        self,
        num_iscr_sito: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")],
        numero_fir: Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None,
        tipo_accettazione: Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None,
        confermate: Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None,
        comune_id: Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None,
        data_emissione_da: Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        data_emissione_a: Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        codice_eer: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8)]], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None,
        ruolo: Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None,
        paging_page: Annotated[Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]], Field(description="Valore per l'header Paging-Page")] = None,
        paging_page_size: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Valore per l'header Paging-PageSize")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[CopiaDigitaleItemResult]]:
        """Copie FIR digitali disponibili

        Ottiene la lista delle copie dei FIR digitali caricate e disponibili per il soggetto specificato.

        :param num_iscr_sito: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_get_serialize(
            num_iscr_sito=num_iscr_sito,
            numero_fir=numero_fir,
            tipo_accettazione=tipo_accettazione,
            confermate=confermate,
            comune_id=comune_id,
            data_emissione_da=data_emissione_da,
            data_emissione_a=data_emissione_a,
            codice_eer=codice_eer,
            ruolo=ruolo,
            paging_page=paging_page,
            paging_page_size=paging_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_get_without_preload_content(
        self,
        num_iscr_sito: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")],
        numero_fir: Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None,
        tipo_accettazione: Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None,
        confermate: Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None,
        comune_id: Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None,
        data_emissione_da: Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        data_emissione_a: Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        codice_eer: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8)]], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None,
        ruolo: Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None,
        paging_page: Annotated[Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]], Field(description="Valore per l'header Paging-Page")] = None,
        paging_page_size: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Valore per l'header Paging-PageSize")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Copie FIR digitali disponibili

        Ottiene la lista delle copie dei FIR digitali caricate e disponibili per il soggetto specificato.

        :param num_iscr_sito: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_get_serialize(
            num_iscr_sito=num_iscr_sito,
            numero_fir=numero_fir,
            tipo_accettazione=tipo_accettazione,
            confermate=confermate,
            comune_id=comune_id,
            data_emissione_da=data_emissione_da,
            data_emissione_a=data_emissione_a,
            codice_eer=codice_eer,
            ruolo=ruolo,
            paging_page=paging_page,
            paging_page_size=paging_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_caricamento_num_iscr_sito_get_serialize(
        self,
        num_iscr_sito,
        numero_fir,
        tipo_accettazione,
        confermate,
        comune_id,
        data_emissione_da,
        data_emissione_a,
        codice_eer,
        ruolo,
        paging_page,
        paging_page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if num_iscr_sito is not None:
            _path_params['num_iscr_sito'] = num_iscr_sito
        # process the query parameters
        if numero_fir is not None:
            
            _query_params.append(('numero_fir', numero_fir))
            
        if tipo_accettazione is not None:
            
            _query_params.append(('tipo_accettazione', tipo_accettazione.value))
            
        if confermate is not None:
            
            _query_params.append(('confermate', confermate))
            
        if comune_id is not None:
            
            _query_params.append(('comune_id', comune_id))
            
        if data_emissione_da is not None:
            if isinstance(data_emissione_da, datetime):
                _query_params.append(
                    (
                        'data_emissione_da',
                        data_emissione_da.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('data_emissione_da', data_emissione_da))
            
        if data_emissione_a is not None:
            if isinstance(data_emissione_a, datetime):
                _query_params.append(
                    (
                        'data_emissione_a',
                        data_emissione_a.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('data_emissione_a', data_emissione_a))
            
        if codice_eer is not None:
            
            _query_params.append(('codice_eer', codice_eer))
            
        if ruolo is not None:
            
            _query_params.append(('ruolo', ruolo.value))
            
        # process the header parameters
        if paging_page is not None:
            _header_params['Paging-Page'] = paging_page
        if paging_page_size is not None:
            _header_params['Paging-PageSize'] = paging_page_size
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/caricamento/{num_iscr_sito}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_delete(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale da cancellare")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Cancella copia FIR digitale

        Elimina il caricamento della copia del FIR digitale. L'operazione è possibile solo se nessuno dei soggetti a cui è stata resa disponibile la copia del FIR digitale l'ha già presa in carico con l'operazione di conferma.

        :param num_iscr_sito: Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale da cancellare (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_delete_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_delete_with_http_info(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale da cancellare")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Cancella copia FIR digitale

        Elimina il caricamento della copia del FIR digitale. L'operazione è possibile solo se nessuno dei soggetti a cui è stata resa disponibile la copia del FIR digitale l'ha già presa in carico con l'operazione di conferma.

        :param num_iscr_sito: Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale da cancellare (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_delete_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_delete_without_preload_content(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale da cancellare")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancella copia FIR digitale

        Elimina il caricamento della copia del FIR digitale. L'operazione è possibile solo se nessuno dei soggetti a cui è stata resa disponibile la copia del FIR digitale l'ha già presa in carico con l'operazione di conferma.

        :param num_iscr_sito: Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale da cancellare (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_delete_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_caricamento_num_iscr_sito_identificativo_delete_serialize(
        self,
        num_iscr_sito,
        identificativo,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if num_iscr_sito is not None:
            _path_params['num_iscr_sito'] = num_iscr_sito
        if identificativo is not None:
            _path_params['identificativo'] = identificativo
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/copia-digitale/caricamento/{num_iscr_sito}/{identificativo}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DownloadableBaseResponse:
        """Documento copia FIR digitale

        Restituisce il file contenente la copia del FIR digitale caricata.

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_with_http_info(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DownloadableBaseResponse]:
        """Documento copia FIR digitale

        Restituisce il file contenente la copia del FIR digitale caricata.

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_without_preload_content(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Documento copia FIR digitale

        Restituisce il file contenente la copia del FIR digitale caricata.

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_serialize(
        self,
        num_iscr_sito,
        identificativo,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if num_iscr_sito is not None:
            _path_params['num_iscr_sito'] = num_iscr_sito
        if identificativo is not None:
            _path_params['identificativo'] = identificativo
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/caricamento/{num_iscr_sito}/{identificativo}/documento',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_get(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CopiaDigitaleResult:
        """Dettaglio copia FIR digitale

        Recupera le informazioni di dettaglio del caricamento della copia del FIR digitale specificata.

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_get_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CopiaDigitaleResult",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_get_with_http_info(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CopiaDigitaleResult]:
        """Dettaglio copia FIR digitale

        Recupera le informazioni di dettaglio del caricamento della copia del FIR digitale specificata.

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_get_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CopiaDigitaleResult",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_caricamento_num_iscr_sito_identificativo_get_without_preload_content(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dettaglio copia FIR digitale

        Recupera le informazioni di dettaglio del caricamento della copia del FIR digitale specificata.

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_num_iscr_sito_identificativo_get_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CopiaDigitaleResult",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_caricamento_num_iscr_sito_identificativo_get_serialize(
        self,
        num_iscr_sito,
        identificativo,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if num_iscr_sito is not None:
            _path_params['num_iscr_sito'] = num_iscr_sito
        if identificativo is not None:
            _path_params['identificativo'] = identificativo
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/caricamento/{num_iscr_sito}/{identificativo}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_caricamento_numero_fir_post(
        self,
        numero_fir: Annotated[str, Field(strict=True, description="Numero del FIR incluso nel file xFIR")],
        copia_digitale_model: Annotated[CopiaDigitaleModel, Field(description="Oggetto contenente il contenuto del file xFIR")],
        x_reply_to: Annotated[Optional[StrictStr], Field(description="URL di callback alla quale verrà inviata la notifica di fine elaborazione")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransazioneModel:
        """🔁[ASYNC] Carica copia digitale xFIR

        Chiusura del ciclo del FIR digitale.  Acquisisce la richiesta di chiusura del ciclo di vita del FIR mediante invio, da parte del destinatario del formulario, del file xFIR che ne contiene le informazioni.  Con l'identificativo della transazione restituito è possibile consultare lo stato di avanzamento dell'elaborazione e richiederne l'esito.<br/>Se viene specificato un URL nell'header X-ReplyTo, al termine dell'elaborazione dei dati, il fruitore riceverà una notifica con l'esito dell'elaborazione all'URL specificato.

        :param numero_fir: Numero del FIR incluso nel file xFIR (required)
        :type numero_fir: str
        :param copia_digitale_model: Oggetto contenente il contenuto del file xFIR (required)
        :type copia_digitale_model: CopiaDigitaleModel
        :param x_reply_to: URL di callback alla quale verrà inviata la notifica di fine elaborazione
        :type x_reply_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_numero_fir_post_serialize(
            numero_fir=numero_fir,
            copia_digitale_model=copia_digitale_model,
            x_reply_to=x_reply_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TransazioneModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_caricamento_numero_fir_post_with_http_info(
        self,
        numero_fir: Annotated[str, Field(strict=True, description="Numero del FIR incluso nel file xFIR")],
        copia_digitale_model: Annotated[CopiaDigitaleModel, Field(description="Oggetto contenente il contenuto del file xFIR")],
        x_reply_to: Annotated[Optional[StrictStr], Field(description="URL di callback alla quale verrà inviata la notifica di fine elaborazione")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransazioneModel]:
        """🔁[ASYNC] Carica copia digitale xFIR

        Chiusura del ciclo del FIR digitale.  Acquisisce la richiesta di chiusura del ciclo di vita del FIR mediante invio, da parte del destinatario del formulario, del file xFIR che ne contiene le informazioni.  Con l'identificativo della transazione restituito è possibile consultare lo stato di avanzamento dell'elaborazione e richiederne l'esito.<br/>Se viene specificato un URL nell'header X-ReplyTo, al termine dell'elaborazione dei dati, il fruitore riceverà una notifica con l'esito dell'elaborazione all'URL specificato.

        :param numero_fir: Numero del FIR incluso nel file xFIR (required)
        :type numero_fir: str
        :param copia_digitale_model: Oggetto contenente il contenuto del file xFIR (required)
        :type copia_digitale_model: CopiaDigitaleModel
        :param x_reply_to: URL di callback alla quale verrà inviata la notifica di fine elaborazione
        :type x_reply_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_numero_fir_post_serialize(
            numero_fir=numero_fir,
            copia_digitale_model=copia_digitale_model,
            x_reply_to=x_reply_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TransazioneModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_caricamento_numero_fir_post_without_preload_content(
        self,
        numero_fir: Annotated[str, Field(strict=True, description="Numero del FIR incluso nel file xFIR")],
        copia_digitale_model: Annotated[CopiaDigitaleModel, Field(description="Oggetto contenente il contenuto del file xFIR")],
        x_reply_to: Annotated[Optional[StrictStr], Field(description="URL di callback alla quale verrà inviata la notifica di fine elaborazione")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """🔁[ASYNC] Carica copia digitale xFIR

        Chiusura del ciclo del FIR digitale.  Acquisisce la richiesta di chiusura del ciclo di vita del FIR mediante invio, da parte del destinatario del formulario, del file xFIR che ne contiene le informazioni.  Con l'identificativo della transazione restituito è possibile consultare lo stato di avanzamento dell'elaborazione e richiederne l'esito.<br/>Se viene specificato un URL nell'header X-ReplyTo, al termine dell'elaborazione dei dati, il fruitore riceverà una notifica con l'esito dell'elaborazione all'URL specificato.

        :param numero_fir: Numero del FIR incluso nel file xFIR (required)
        :type numero_fir: str
        :param copia_digitale_model: Oggetto contenente il contenuto del file xFIR (required)
        :type copia_digitale_model: CopiaDigitaleModel
        :param x_reply_to: URL di callback alla quale verrà inviata la notifica di fine elaborazione
        :type x_reply_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_caricamento_numero_fir_post_serialize(
            numero_fir=numero_fir,
            copia_digitale_model=copia_digitale_model,
            x_reply_to=x_reply_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TransazioneModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_caricamento_numero_fir_post_serialize(
        self,
        numero_fir,
        copia_digitale_model,
        x_reply_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if numero_fir is not None:
            _path_params['numero_fir'] = numero_fir
        # process the query parameters
        # process the header parameters
        if x_reply_to is not None:
            _header_params['X-ReplyTo'] = x_reply_to
        # process the form parameters
        # process the body parameter
        if copia_digitale_model is not None:
            _body_params = copia_digitale_model


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/copia-digitale/caricamento/{numero_fir}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_get(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")],
        num_iscr_sito: Annotated[Optional[StrictStr], Field(description="Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali")] = None,
        numero_fir: Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None,
        tipo_accettazione: Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None,
        confermate: Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None,
        comune_id: Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None,
        data_emissione_da: Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        data_emissione_a: Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        codice_eer: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8)]], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None,
        ruolo: Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None,
        paging_page: Annotated[Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]], Field(description="Valore per l'header Paging-Page")] = None,
        paging_page_size: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Valore per l'header Paging-PageSize")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[CopiaDigitaleItemResult]:
        """Copie FIR digitali disponibili

        Ottiene la lista delle copie dei FIR digitali, disponibili per la conferma o già confermati, per il soggetto specificato.

        :param identificativo_soggetto: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type identificativo_soggetto: str
        :param num_iscr_sito: Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            num_iscr_sito=num_iscr_sito,
            numero_fir=numero_fir,
            tipo_accettazione=tipo_accettazione,
            confermate=confermate,
            comune_id=comune_id,
            data_emissione_da=data_emissione_da,
            data_emissione_a=data_emissione_a,
            codice_eer=codice_eer,
            ruolo=ruolo,
            paging_page=paging_page,
            paging_page_size=paging_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_get_with_http_info(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")],
        num_iscr_sito: Annotated[Optional[StrictStr], Field(description="Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali")] = None,
        numero_fir: Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None,
        tipo_accettazione: Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None,
        confermate: Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None,
        comune_id: Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None,
        data_emissione_da: Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        data_emissione_a: Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        codice_eer: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8)]], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None,
        ruolo: Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None,
        paging_page: Annotated[Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]], Field(description="Valore per l'header Paging-Page")] = None,
        paging_page_size: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Valore per l'header Paging-PageSize")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[CopiaDigitaleItemResult]]:
        """Copie FIR digitali disponibili

        Ottiene la lista delle copie dei FIR digitali, disponibili per la conferma o già confermati, per il soggetto specificato.

        :param identificativo_soggetto: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type identificativo_soggetto: str
        :param num_iscr_sito: Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            num_iscr_sito=num_iscr_sito,
            numero_fir=numero_fir,
            tipo_accettazione=tipo_accettazione,
            confermate=confermate,
            comune_id=comune_id,
            data_emissione_da=data_emissione_da,
            data_emissione_a=data_emissione_a,
            codice_eer=codice_eer,
            ruolo=ruolo,
            paging_page=paging_page,
            paging_page_size=paging_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_get_without_preload_content(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")],
        num_iscr_sito: Annotated[Optional[StrictStr], Field(description="Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali")] = None,
        numero_fir: Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None,
        tipo_accettazione: Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None,
        confermate: Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None,
        comune_id: Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None,
        data_emissione_da: Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        data_emissione_a: Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None,
        codice_eer: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8)]], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None,
        ruolo: Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None,
        paging_page: Annotated[Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]], Field(description="Valore per l'header Paging-Page")] = None,
        paging_page_size: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Valore per l'header Paging-PageSize")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Copie FIR digitali disponibili

        Ottiene la lista delle copie dei FIR digitali, disponibili per la conferma o già confermati, per il soggetto specificato.

        :param identificativo_soggetto: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type identificativo_soggetto: str
        :param num_iscr_sito: Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            num_iscr_sito=num_iscr_sito,
            numero_fir=numero_fir,
            tipo_accettazione=tipo_accettazione,
            confermate=confermate,
            comune_id=comune_id,
            data_emissione_da=data_emissione_da,
            data_emissione_a=data_emissione_a,
            codice_eer=codice_eer,
            ruolo=ruolo,
            paging_page=paging_page,
            paging_page_size=paging_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_conferma_identificativo_soggetto_get_serialize(
        self,
        identificativo_soggetto,
        num_iscr_sito,
        numero_fir,
        tipo_accettazione,
        confermate,
        comune_id,
        data_emissione_da,
        data_emissione_a,
        codice_eer,
        ruolo,
        paging_page,
        paging_page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identificativo_soggetto is not None:
            _path_params['identificativo_soggetto'] = identificativo_soggetto
        # process the query parameters
        if num_iscr_sito is not None:
            
            _query_params.append(('num_iscr_sito', num_iscr_sito))
            
        if numero_fir is not None:
            
            _query_params.append(('numero_fir', numero_fir))
            
        if tipo_accettazione is not None:
            
            _query_params.append(('tipo_accettazione', tipo_accettazione.value))
            
        if confermate is not None:
            
            _query_params.append(('confermate', confermate))
            
        if comune_id is not None:
            
            _query_params.append(('comune_id', comune_id))
            
        if data_emissione_da is not None:
            if isinstance(data_emissione_da, datetime):
                _query_params.append(
                    (
                        'data_emissione_da',
                        data_emissione_da.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('data_emissione_da', data_emissione_da))
            
        if data_emissione_a is not None:
            if isinstance(data_emissione_a, datetime):
                _query_params.append(
                    (
                        'data_emissione_a',
                        data_emissione_a.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('data_emissione_a', data_emissione_a))
            
        if codice_eer is not None:
            
            _query_params.append(('codice_eer', codice_eer))
            
        if ruolo is not None:
            
            _query_params.append(('ruolo', ruolo.value))
            
        # process the header parameters
        if paging_page is not None:
            _header_params['Paging-Page'] = paging_page
        if paging_page_size is not None:
            _header_params['Paging-PageSize'] = paging_page_size
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/conferma/{identificativo_soggetto}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR cartaceo caricata dal trasportatore")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DownloadableBaseResponse:
        """Documento copia FIR digitale disponibile

        Restituisce il documento della copia del FIR digitale specificata caricata dal destinatario.

        :param identificativo_soggetto: Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR cartaceo caricata dal trasportatore (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_with_http_info(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR cartaceo caricata dal trasportatore")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DownloadableBaseResponse]:
        """Documento copia FIR digitale disponibile

        Restituisce il documento della copia del FIR digitale specificata caricata dal destinatario.

        :param identificativo_soggetto: Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR cartaceo caricata dal trasportatore (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_without_preload_content(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR cartaceo caricata dal trasportatore")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Documento copia FIR digitale disponibile

        Restituisce il documento della copia del FIR digitale specificata caricata dal destinatario.

        :param identificativo_soggetto: Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR cartaceo caricata dal trasportatore (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_serialize(
        self,
        identificativo_soggetto,
        identificativo,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identificativo_soggetto is not None:
            _path_params['identificativo_soggetto'] = identificativo_soggetto
        if identificativo is not None:
            _path_params['identificativo'] = identificativo
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/conferma/{identificativo_soggetto}/{identificativo}/documento',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_identificativo_get(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CopiaDigitaleResult:
        """Dettaglio copia digitale FIR disponibile

        Restituisce il dettaglio dei dati di caricamento della copia digitale del FIR caricata.

        :param identificativo_soggetto: Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_identificativo_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CopiaDigitaleResult",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_identificativo_get_with_http_info(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CopiaDigitaleResult]:
        """Dettaglio copia digitale FIR disponibile

        Restituisce il dettaglio dei dati di caricamento della copia digitale del FIR caricata.

        :param identificativo_soggetto: Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_identificativo_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CopiaDigitaleResult",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_conferma_identificativo_soggetto_identificativo_get_without_preload_content(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dettaglio copia digitale FIR disponibile

        Restituisce il dettaglio dei dati di caricamento della copia digitale del FIR caricata.

        :param identificativo_soggetto: Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio (required)
        :type identificativo: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_identificativo_soggetto_identificativo_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            identificativo=identificativo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CopiaDigitaleResult",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_conferma_identificativo_soggetto_identificativo_get_serialize(
        self,
        identificativo_soggetto,
        identificativo,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identificativo_soggetto is not None:
            _path_params['identificativo_soggetto'] = identificativo_soggetto
        if identificativo is not None:
            _path_params['identificativo'] = identificativo
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/conferma/{identificativo_soggetto}/{identificativo}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_conferma_num_iscr_sito_identificativo_put(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")],
        ruolo: Annotated[Optional[Any], Field(description="Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio")] = None,
        respingi: Annotated[Optional[StrictBool], Field(description="Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Conferma copia FIR digitale disponibile


        :param num_iscr_sito: Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param ruolo: Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio
        :type ruolo: RuoloConfermaCopiaDigitale
        :param respingi: Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati
        :type respingi: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_num_iscr_sito_identificativo_put_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            ruolo=ruolo,
            respingi=respingi,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_conferma_num_iscr_sito_identificativo_put_with_http_info(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")],
        ruolo: Annotated[Optional[Any], Field(description="Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio")] = None,
        respingi: Annotated[Optional[StrictBool], Field(description="Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Conferma copia FIR digitale disponibile


        :param num_iscr_sito: Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param ruolo: Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio
        :type ruolo: RuoloConfermaCopiaDigitale
        :param respingi: Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati
        :type respingi: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_num_iscr_sito_identificativo_put_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            ruolo=ruolo,
            respingi=respingi,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_conferma_num_iscr_sito_identificativo_put_without_preload_content(
        self,
        num_iscr_sito: Annotated[str, Field(strict=True, description="Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")],
        identificativo: Annotated[StrictStr, Field(description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")],
        ruolo: Annotated[Optional[Any], Field(description="Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio")] = None,
        respingi: Annotated[Optional[StrictBool], Field(description="Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Conferma copia FIR digitale disponibile


        :param num_iscr_sito: Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param ruolo: Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio
        :type ruolo: RuoloConfermaCopiaDigitale
        :param respingi: Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati
        :type respingi: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._copia_digitale_conferma_num_iscr_sito_identificativo_put_serialize(
            num_iscr_sito=num_iscr_sito,
            identificativo=identificativo,
            ruolo=ruolo,
            respingi=respingi,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_conferma_num_iscr_sito_identificativo_put_serialize(
        self,
        num_iscr_sito,
        identificativo,
        ruolo,
        respingi,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if num_iscr_sito is not None:
            _path_params['num_iscr_sito'] = num_iscr_sito
        if identificativo is not None:
            _path_params['identificativo'] = identificativo
        # process the query parameters
        if ruolo is not None:
            
            _query_params.append(('ruolo', ruolo.value))
            
        if respingi is not None:
            
            _query_params.append(('respingi', respingi))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/copia-digitale/conferma/{num_iscr_sito}/{identificativo}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_transazione_id_result_get(
        self,
        transazione_id: Annotated[StrictStr, Field(description="Id della richiesta")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EsitoCopiaDigitaleModel:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/result - Esito transazione

        Ottiene l'esito dell'elaborazione di una richiesta asincrona.

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /copia-digitale/{transazione_id}/result is deprecated.", DeprecationWarning)

        _param = self._copia_digitale_transazione_id_result_get_serialize(
            transazione_id=transazione_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EsitoCopiaDigitaleModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_transazione_id_result_get_with_http_info(
        self,
        transazione_id: Annotated[StrictStr, Field(description="Id della richiesta")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EsitoCopiaDigitaleModel]:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/result - Esito transazione

        Ottiene l'esito dell'elaborazione di una richiesta asincrona.

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /copia-digitale/{transazione_id}/result is deprecated.", DeprecationWarning)

        _param = self._copia_digitale_transazione_id_result_get_serialize(
            transazione_id=transazione_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EsitoCopiaDigitaleModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_transazione_id_result_get_without_preload_content(
        self,
        transazione_id: Annotated[StrictStr, Field(description="Id della richiesta")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/result - Esito transazione

        Ottiene l'esito dell'elaborazione di una richiesta asincrona.

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /copia-digitale/{transazione_id}/result is deprecated.", DeprecationWarning)

        _param = self._copia_digitale_transazione_id_result_get_serialize(
            transazione_id=transazione_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EsitoCopiaDigitaleModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_transazione_id_result_get_serialize(
        self,
        transazione_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if transazione_id is not None:
            _path_params['transazione_id'] = transazione_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/{transazione_id}/result',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def copia_digitale_transazione_id_status_get(
        self,
        transazione_id: Annotated[StrictStr, Field(description="Id della richiesta")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/status - Stato transazione

        

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /copia-digitale/{transazione_id}/status is deprecated.", DeprecationWarning)

        _param = self._copia_digitale_transazione_id_status_get_serialize(
            transazione_id=transazione_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '303': None,
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def copia_digitale_transazione_id_status_get_with_http_info(
        self,
        transazione_id: Annotated[StrictStr, Field(description="Id della richiesta")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/status - Stato transazione

        

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /copia-digitale/{transazione_id}/status is deprecated.", DeprecationWarning)

        _param = self._copia_digitale_transazione_id_status_get_serialize(
            transazione_id=transazione_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '303': None,
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def copia_digitale_transazione_id_status_get_without_preload_content(
        self,
        transazione_id: Annotated[StrictStr, Field(description="Id della richiesta")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/status - Stato transazione

        

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /copia-digitale/{transazione_id}/status is deprecated.", DeprecationWarning)

        _param = self._copia_digitale_transazione_id_status_get_serialize(
            transazione_id=transazione_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '303': None,
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _copia_digitale_transazione_id_status_get_serialize(
        self,
        transazione_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if transazione_id is not None:
            _path_params['transazione_id'] = transazione_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/copia-digitale/{transazione_id}/status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


