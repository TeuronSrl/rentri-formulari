# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictStr, conint, constr, validator

from typing import Any, List, Optional

from rentri_formulari.models.copia_digitale_item_result import CopiaDigitaleItemResult
from rentri_formulari.models.copia_digitale_model import CopiaDigitaleModel
from rentri_formulari.models.copia_digitale_result import CopiaDigitaleResult
from rentri_formulari.models.downloadable_base_response import DownloadableBaseResponse
from rentri_formulari.models.esito_copia_digitale_model import EsitoCopiaDigitaleModel
from rentri_formulari.models.transazione_model import TransazioneModel

from rentri_formulari.api_client import ApiClient
from rentri_formulari.api_response import ApiResponse
from rentri_formulari.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CopiaFIRDigitaleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_get(self, num_iscr_sito : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")], numero_fir : Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None, tipo_accettazione : Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None, confermate : Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None, comune_id : Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None, data_emissione_da : Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, data_emissione_a : Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, codice_eer : Annotated[Optional[constr(strict=True, max_length=8)], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None, ruolo : Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize")] = None, **kwargs) -> List[CopiaDigitaleItemResult]:  # noqa: E501
        """Copie FIR digitali disponibili  # noqa: E501

        Ottiene la lista delle copie dei FIR digitali caricate e disponibili per il soggetto specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_get(num_iscr_sito, numero_fir, tipo_accettazione, confermate, comune_id, data_emissione_da, data_emissione_a, codice_eer, ruolo, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CopiaDigitaleItemResult]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_caricamento_num_iscr_sito_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_caricamento_num_iscr_sito_get_with_http_info(num_iscr_sito, numero_fir, tipo_accettazione, confermate, comune_id, data_emissione_da, data_emissione_a, codice_eer, ruolo, paging_page, paging_page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_get_with_http_info(self, num_iscr_sito : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")], numero_fir : Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None, tipo_accettazione : Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None, confermate : Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None, comune_id : Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None, data_emissione_da : Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, data_emissione_a : Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, codice_eer : Annotated[Optional[constr(strict=True, max_length=8)], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None, ruolo : Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Copie FIR digitali disponibili  # noqa: E501

        Ottiene la lista delle copie dei FIR digitali caricate e disponibili per il soggetto specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_get_with_http_info(num_iscr_sito, numero_fir, tipo_accettazione, confermate, comune_id, data_emissione_da, data_emissione_a, codice_eer, ruolo, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CopiaDigitaleItemResult], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'numero_fir',
            'tipo_accettazione',
            'confermate',
            'comune_id',
            'data_emissione_da',
            'data_emissione_a',
            'codice_eer',
            'ruolo',
            'paging_page',
            'paging_page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_caricamento_num_iscr_sito_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']


        # process the query parameters
        _query_params = []
        if _params.get('numero_fir') is not None:  # noqa: E501
            _query_params.append(('numero_fir', _params['numero_fir']))

        if _params.get('tipo_accettazione') is not None:  # noqa: E501
            _query_params.append(('tipo_accettazione', _params['tipo_accettazione'].value))

        if _params.get('confermate') is not None:  # noqa: E501
            _query_params.append(('confermate', _params['confermate']))

        if _params.get('comune_id') is not None:  # noqa: E501
            _query_params.append(('comune_id', _params['comune_id']))

        if _params.get('data_emissione_da') is not None:  # noqa: E501
            if isinstance(_params['data_emissione_da'], datetime):
                _query_params.append(('data_emissione_da', _params['data_emissione_da'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('data_emissione_da', _params['data_emissione_da']))

        if _params.get('data_emissione_a') is not None:  # noqa: E501
            if isinstance(_params['data_emissione_a'], datetime):
                _query_params.append(('data_emissione_a', _params['data_emissione_a'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('data_emissione_a', _params['data_emissione_a']))

        if _params.get('codice_eer') is not None:  # noqa: E501
            _query_params.append(('codice_eer', _params['codice_eer']))

        if _params.get('ruolo') is not None:  # noqa: E501
            _query_params.append(('ruolo', _params['ruolo'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['paging_page'] is not None:
            _header_params['Paging-Page'] = _params['paging_page']

        if _params['paging_page_size'] is not None:
            _header_params['Paging-PageSize'] = _params['paging_page_size']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/caricamento/{num_iscr_sito}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_identificativo_delete(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale da cancellare")], **kwargs) -> None:  # noqa: E501
        """Cancella copia FIR digitale  # noqa: E501

        Elimina il caricamento della copia del FIR digitale. L'operazione è possibile solo se nessuno dei soggetti a cui è stata resa disponibile la copia del FIR digitale l'ha già presa in carico con l'operazione di conferma.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_identificativo_delete(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale da cancellare (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_caricamento_num_iscr_sito_identificativo_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_caricamento_num_iscr_sito_identificativo_delete_with_http_info(num_iscr_sito, identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_identificativo_delete_with_http_info(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale da cancellare")], **kwargs) -> ApiResponse:  # noqa: E501
        """Cancella copia FIR digitale  # noqa: E501

        Elimina il caricamento della copia del FIR digitale. L'operazione è possibile solo se nessuno dei soggetti a cui è stata resa disponibile la copia del FIR digitale l'ha già presa in carico con l'operazione di conferma.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_identificativo_delete_with_http_info(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del trasportatore che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale da cancellare (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_caricamento_num_iscr_sito_identificativo_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/copia-digitale/caricamento/{num_iscr_sito}/{identificativo}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")], **kwargs) -> DownloadableBaseResponse:  # noqa: E501
        """Documento copia FIR digitale  # noqa: E501

        Restituisce il file contenente la copia del FIR digitale caricata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DownloadableBaseResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_with_http_info(num_iscr_sito, identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_with_http_info(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")], **kwargs) -> ApiResponse:  # noqa: E501
        """Documento copia FIR digitale  # noqa: E501

        Restituisce il file contenente la copia del FIR digitale caricata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get_with_http_info(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DownloadableBaseResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_caricamento_num_iscr_sito_identificativo_documento_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/caricamento/{num_iscr_sito}/{identificativo}/documento', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_identificativo_get(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale")], **kwargs) -> CopiaDigitaleResult:  # noqa: E501
        """Dettaglio copia FIR digitale  # noqa: E501

        Recupera le informazioni di dettaglio del caricamento della copia del FIR digitale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_identificativo_get(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CopiaDigitaleResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_caricamento_num_iscr_sito_identificativo_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_caricamento_num_iscr_sito_identificativo_get_with_http_info(num_iscr_sito, identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_caricamento_num_iscr_sito_identificativo_get_with_http_info(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale")], **kwargs) -> ApiResponse:  # noqa: E501
        """Dettaglio copia FIR digitale  # noqa: E501

        Recupera le informazioni di dettaglio del caricamento della copia del FIR digitale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_num_iscr_sito_identificativo_get_with_http_info(num_iscr_sito, identificativo, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del destinatario che ha caricato la copia del FIR digitale             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CopiaDigitaleResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_caricamento_num_iscr_sito_identificativo_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CopiaDigitaleResult",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/caricamento/{num_iscr_sito}/{identificativo}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_caricamento_numero_fir_post(self, numero_fir : Annotated[constr(strict=True), Field(..., description="Numero del FIR incluso nel file xFIR")], copia_digitale_model : Annotated[CopiaDigitaleModel, Field(..., description="Oggetto contenente il contenuto del file xFIR")], x_reply_to : Annotated[Optional[StrictStr], Field(description="URL di callback alla quale verrà inviata la notifica di fine elaborazione")] = None, **kwargs) -> TransazioneModel:  # noqa: E501
        """🔁[ASYNC] Carica copia digitale xFIR  # noqa: E501

        Chiusura del ciclo del FIR digitale.  Acquisisce la richiesta di chiusura del ciclo di vita del FIR mediante invio, da parte del destinatario del formulario, del file xFIR che ne contiene le informazioni.  Con l'identificativo della transazione restituito è possibile consultare lo stato di avanzamento dell'elaborazione e richiederne l'esito.<br/>Se viene specificato un URL nell'header X-ReplyTo, al termine dell'elaborazione dei dati, il fruitore riceverà una notifica con l'esito dell'elaborazione all'URL specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_numero_fir_post(numero_fir, copia_digitale_model, x_reply_to, async_req=True)
        >>> result = thread.get()

        :param numero_fir: Numero del FIR incluso nel file xFIR (required)
        :type numero_fir: str
        :param copia_digitale_model: Oggetto contenente il contenuto del file xFIR (required)
        :type copia_digitale_model: CopiaDigitaleModel
        :param x_reply_to: URL di callback alla quale verrà inviata la notifica di fine elaborazione
        :type x_reply_to: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransazioneModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_caricamento_numero_fir_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_caricamento_numero_fir_post_with_http_info(numero_fir, copia_digitale_model, x_reply_to, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_caricamento_numero_fir_post_with_http_info(self, numero_fir : Annotated[constr(strict=True), Field(..., description="Numero del FIR incluso nel file xFIR")], copia_digitale_model : Annotated[CopiaDigitaleModel, Field(..., description="Oggetto contenente il contenuto del file xFIR")], x_reply_to : Annotated[Optional[StrictStr], Field(description="URL di callback alla quale verrà inviata la notifica di fine elaborazione")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """🔁[ASYNC] Carica copia digitale xFIR  # noqa: E501

        Chiusura del ciclo del FIR digitale.  Acquisisce la richiesta di chiusura del ciclo di vita del FIR mediante invio, da parte del destinatario del formulario, del file xFIR che ne contiene le informazioni.  Con l'identificativo della transazione restituito è possibile consultare lo stato di avanzamento dell'elaborazione e richiederne l'esito.<br/>Se viene specificato un URL nell'header X-ReplyTo, al termine dell'elaborazione dei dati, il fruitore riceverà una notifica con l'esito dell'elaborazione all'URL specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_caricamento_numero_fir_post_with_http_info(numero_fir, copia_digitale_model, x_reply_to, async_req=True)
        >>> result = thread.get()

        :param numero_fir: Numero del FIR incluso nel file xFIR (required)
        :type numero_fir: str
        :param copia_digitale_model: Oggetto contenente il contenuto del file xFIR (required)
        :type copia_digitale_model: CopiaDigitaleModel
        :param x_reply_to: URL di callback alla quale verrà inviata la notifica di fine elaborazione
        :type x_reply_to: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransazioneModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'numero_fir',
            'copia_digitale_model',
            'x_reply_to'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_caricamento_numero_fir_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['numero_fir'] is not None:
            _path_params['numero_fir'] = _params['numero_fir']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_reply_to'] is not None:
            _header_params['X-ReplyTo'] = _params['x_reply_to']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['copia_digitale_model'] is not None:
            _body_params = _params['copia_digitale_model']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '202': "TransazioneModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/caricamento/{numero_fir}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_conferma_identificativo_soggetto_get(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")], num_iscr_sito : Annotated[Optional[StrictStr], Field(description="Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali")] = None, numero_fir : Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None, tipo_accettazione : Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None, confermate : Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None, comune_id : Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None, data_emissione_da : Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, data_emissione_a : Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, codice_eer : Annotated[Optional[constr(strict=True, max_length=8)], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None, ruolo : Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize")] = None, **kwargs) -> List[CopiaDigitaleItemResult]:  # noqa: E501
        """Copie FIR digitali disponibili  # noqa: E501

        Ottiene la lista delle copie dei FIR digitali, disponibili per la conferma o già confermati, per il soggetto specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_identificativo_soggetto_get(identificativo_soggetto, num_iscr_sito, numero_fir, tipo_accettazione, confermate, comune_id, data_emissione_da, data_emissione_a, codice_eer, ruolo, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type identificativo_soggetto: str
        :param num_iscr_sito: Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CopiaDigitaleItemResult]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_conferma_identificativo_soggetto_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_conferma_identificativo_soggetto_get_with_http_info(identificativo_soggetto, num_iscr_sito, numero_fir, tipo_accettazione, confermate, comune_id, data_emissione_da, data_emissione_a, codice_eer, ruolo, paging_page, paging_page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_conferma_identificativo_soggetto_get_with_http_info(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili")], num_iscr_sito : Annotated[Optional[StrictStr], Field(description="Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali")] = None, numero_fir : Annotated[Optional[StrictStr], Field(description="Numero FIR della copia del FIR digitale")] = None, tipo_accettazione : Annotated[Optional[Any], Field(description="Filtra le copia dei FIR digitali per tipo di accettazione del destinatario")] = None, confermate : Annotated[Optional[StrictBool], Field(description="Filtra le copie dei FIR digitali confermate o non confermate.")] = None, comune_id : Annotated[Optional[StrictStr], Field(description="Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore")] = None, data_emissione_da : Annotated[Optional[datetime], Field(description="Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, data_emissione_a : Annotated[Optional[datetime], Field(description="Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)")] = None, codice_eer : Annotated[Optional[constr(strict=True, max_length=8)], Field(description="Filta le copie digiitali dei FIR per il codice EER del rifiuto")] = None, ruolo : Annotated[Optional[Any], Field(description="Ruolo per il quale si richiedono le copie dei FIR digitali da confermare")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Copie FIR digitali disponibili  # noqa: E501

        Ottiene la lista delle copie dei FIR digitali, disponibili per la conferma o già confermati, per il soggetto specificato.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_identificativo_soggetto_get_with_http_info(identificativo_soggetto, num_iscr_sito, numero_fir, tipo_accettazione, confermate, comune_id, data_emissione_da, data_emissione_a, codice_eer, ruolo, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice fiscale del soggetto per cui richiedere l'elenco delle copie dei FIR digitali disponibili (required)
        :type identificativo_soggetto: str
        :param num_iscr_sito: Eventuale numero di iscrizione dell'unità locale per la quale si richiedeono le copie dei FIR digitali
        :type num_iscr_sito: str
        :param numero_fir: Numero FIR della copia del FIR digitale
        :type numero_fir: str
        :param tipo_accettazione: Filtra le copia dei FIR digitali per tipo di accettazione del destinatario
        :type tipo_accettazione: TipiAccettazione
        :param confermate: Filtra le copie dei FIR digitali confermate o non confermate.
        :type confermate: bool
        :param comune_id: Filtra le copie dei FIR digitali per il comune. Il valore viene considerato solo per il ruolo di produttore
        :type comune_id: str
        :param data_emissione_da: Data di emissione a partire dalla quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_da: datetime
        :param data_emissione_a: Data massima di emissione entro la quale si richiedono le copie dei FIR digitali (formato ISO 8601 UTC)
        :type data_emissione_a: datetime
        :param codice_eer: Filta le copie digiitali dei FIR per il codice EER del rifiuto
        :type codice_eer: str
        :param ruolo: Ruolo per il quale si richiedono le copie dei FIR digitali da confermare
        :type ruolo: RuoloConfermaCopiaDigitale
        :param paging_page: Valore per l'header Paging-Page
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CopiaDigitaleItemResult], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo_soggetto',
            'num_iscr_sito',
            'numero_fir',
            'tipo_accettazione',
            'confermate',
            'comune_id',
            'data_emissione_da',
            'data_emissione_a',
            'codice_eer',
            'ruolo',
            'paging_page',
            'paging_page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_conferma_identificativo_soggetto_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo_soggetto'] is not None:
            _path_params['identificativo_soggetto'] = _params['identificativo_soggetto']


        # process the query parameters
        _query_params = []
        if _params.get('num_iscr_sito') is not None:  # noqa: E501
            _query_params.append(('num_iscr_sito', _params['num_iscr_sito']))

        if _params.get('numero_fir') is not None:  # noqa: E501
            _query_params.append(('numero_fir', _params['numero_fir']))

        if _params.get('tipo_accettazione') is not None:  # noqa: E501
            _query_params.append(('tipo_accettazione', _params['tipo_accettazione'].value))

        if _params.get('confermate') is not None:  # noqa: E501
            _query_params.append(('confermate', _params['confermate']))

        if _params.get('comune_id') is not None:  # noqa: E501
            _query_params.append(('comune_id', _params['comune_id']))

        if _params.get('data_emissione_da') is not None:  # noqa: E501
            if isinstance(_params['data_emissione_da'], datetime):
                _query_params.append(('data_emissione_da', _params['data_emissione_da'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('data_emissione_da', _params['data_emissione_da']))

        if _params.get('data_emissione_a') is not None:  # noqa: E501
            if isinstance(_params['data_emissione_a'], datetime):
                _query_params.append(('data_emissione_a', _params['data_emissione_a'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('data_emissione_a', _params['data_emissione_a']))

        if _params.get('codice_eer') is not None:  # noqa: E501
            _query_params.append(('codice_eer', _params['codice_eer']))

        if _params.get('ruolo') is not None:  # noqa: E501
            _query_params.append(('ruolo', _params['ruolo'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['paging_page'] is not None:
            _header_params['Paging-Page'] = _params['paging_page']

        if _params['paging_page_size'] is not None:
            _header_params['Paging-PageSize'] = _params['paging_page_size']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[CopiaDigitaleItemResult]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/conferma/{identificativo_soggetto}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR cartaceo caricata dal trasportatore")], **kwargs) -> DownloadableBaseResponse:  # noqa: E501
        """Documento copia FIR digitale disponibile  # noqa: E501

        Restituisce il documento della copia del FIR digitale specificata caricata dal destinatario.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get(identificativo_soggetto, identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR cartaceo caricata dal trasportatore (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DownloadableBaseResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_with_http_info(identificativo_soggetto, identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_with_http_info(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR cartaceo caricata dal trasportatore")], **kwargs) -> ApiResponse:  # noqa: E501
        """Documento copia FIR digitale disponibile  # noqa: E501

        Restituisce il documento della copia del FIR digitale specificata caricata dal destinatario.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get_with_http_info(identificativo_soggetto, identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice fiscale del soggetto per il quale si richiede il documento della copia del FIR cartaceo (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR cartaceo caricata dal trasportatore (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DownloadableBaseResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo_soggetto',
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_conferma_identificativo_soggetto_identificativo_documento_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo_soggetto'] is not None:
            _path_params['identificativo_soggetto'] = _params['identificativo_soggetto']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/conferma/{identificativo_soggetto}/{identificativo}/documento', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_conferma_identificativo_soggetto_identificativo_get(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio")], **kwargs) -> CopiaDigitaleResult:  # noqa: E501
        """Dettaglio copia digitale FIR disponibile  # noqa: E501

        Restituisce il dettaglio dei dati di caricamento della copia digitale del FIR caricata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_identificativo_soggetto_identificativo_get(identificativo_soggetto, identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CopiaDigitaleResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_conferma_identificativo_soggetto_identificativo_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_conferma_identificativo_soggetto_identificativo_get_with_http_info(identificativo_soggetto, identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_conferma_identificativo_soggetto_identificativo_get_with_http_info(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio")], **kwargs) -> ApiResponse:  # noqa: E501
        """Dettaglio copia digitale FIR disponibile  # noqa: E501

        Restituisce il dettaglio dei dati di caricamento della copia digitale del FIR caricata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_identificativo_soggetto_identificativo_get_with_http_info(identificativo_soggetto, identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice fiscale del soggetto a cui è resa disponibile la copia del FIR digitale (required)
        :type identificativo_soggetto: str
        :param identificativo: Identificativo della copia del FIR digitale per cui vengono richieste le informazioni di dettaglio (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CopiaDigitaleResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo_soggetto',
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_conferma_identificativo_soggetto_identificativo_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo_soggetto'] is not None:
            _path_params['identificativo_soggetto'] = _params['identificativo_soggetto']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CopiaDigitaleResult",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/conferma/{identificativo_soggetto}/{identificativo}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_conferma_num_iscr_sito_identificativo_put(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")], ruolo : Annotated[Optional[Any], Field(description="Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio")] = None, respingi : Annotated[Optional[StrictBool], Field(description="Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati")] = None, **kwargs) -> None:  # noqa: E501
        """Conferma copia FIR digitale disponibile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_num_iscr_sito_identificativo_put(num_iscr_sito, identificativo, ruolo, respingi, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param ruolo: Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio
        :type ruolo: RuoloConfermaCopiaDigitale
        :param respingi: Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati
        :type respingi: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_conferma_num_iscr_sito_identificativo_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_conferma_num_iscr_sito_identificativo_put_with_http_info(num_iscr_sito, identificativo, ruolo, respingi, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_conferma_num_iscr_sito_identificativo_put_with_http_info(self, num_iscr_sito : Annotated[constr(strict=True), Field(..., description="Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\"")], identificativo : Annotated[StrictStr, Field(..., description="Identificativo della copia del FIR digitale della quale restituire il documento caricato")], ruolo : Annotated[Optional[Any], Field(description="Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio")] = None, respingi : Annotated[Optional[StrictBool], Field(description="Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Conferma copia FIR digitale disponibile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_conferma_num_iscr_sito_identificativo_put_with_http_info(num_iscr_sito, identificativo, ruolo, respingi, async_req=True)
        >>> result = thread.get()

        :param num_iscr_sito: Numero iscrizione unità locale del soggetto che conferma la presa visione della copia del FIR digitale.             Per recuperare il numero iscrizione unità locale consultare l'operazione \"Elenco Unità Locali iscritte\" nell'area riservata Operatori dove è presente la voce \"Numero iscrizione unità locale\" (required)
        :type num_iscr_sito: str
        :param identificativo: Identificativo della copia del FIR digitale della quale restituire il documento caricato (required)
        :type identificativo: str
        :param ruolo: Ruolo all'interno del FIR del soggetto per cui si effettua l'operazione di conferma di presa visione.              In caso di ambiguità (lo stesso soggetto a cui si riferisce l'unità locale \"numIscrSito\" appare con più ruoli all'interno del FIR) il parametro è obbligatorio
        :type ruolo: RuoloConfermaCopiaDigitale
        :param respingi: Se valorizzato a true annulla una eventuale precedente operazione di presa visione per i parametri specificati
        :type respingi: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'num_iscr_sito',
            'identificativo',
            'ruolo',
            'respingi'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_conferma_num_iscr_sito_identificativo_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']

        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        if _params.get('ruolo') is not None:  # noqa: E501
            _query_params.append(('ruolo', _params['ruolo'].value))

        if _params.get('respingi') is not None:  # noqa: E501
            _query_params.append(('respingi', _params['respingi']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/copia-digitale/conferma/{num_iscr_sito}/{identificativo}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_transazione_id_result_get(self, transazione_id : Annotated[StrictStr, Field(..., description="Id della richiesta")], **kwargs) -> EsitoCopiaDigitaleModel:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/result - Esito transazione  # noqa: E501

        Ottiene l'esito dell'elaborazione di una richiesta asincrona.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_transazione_id_result_get(transazione_id, async_req=True)
        >>> result = thread.get()

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EsitoCopiaDigitaleModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_transazione_id_result_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_transazione_id_result_get_with_http_info(transazione_id, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_transazione_id_result_get_with_http_info(self, transazione_id : Annotated[StrictStr, Field(..., description="Id della richiesta")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/result - Esito transazione  # noqa: E501

        Ottiene l'esito dell'elaborazione di una richiesta asincrona.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_transazione_id_result_get_with_http_info(transazione_id, async_req=True)
        >>> result = thread.get()

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EsitoCopiaDigitaleModel, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /copia-digitale/{transazione_id}/result is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'transazione_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_transazione_id_result_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['transazione_id'] is not None:
            _path_params['transazione_id'] = _params['transazione_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "EsitoCopiaDigitaleModel",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/copia-digitale/{transazione_id}/result', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def copia_digitale_transazione_id_status_get(self, transazione_id : Annotated[StrictStr, Field(..., description="Id della richiesta")], **kwargs) -> None:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/status - Stato transazione  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_transazione_id_status_get(transazione_id, async_req=True)
        >>> result = thread.get()

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the copia_digitale_transazione_id_status_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.copia_digitale_transazione_id_status_get_with_http_info(transazione_id, **kwargs)  # noqa: E501

    @validate_arguments
    def copia_digitale_transazione_id_status_get_with_http_info(self, transazione_id : Annotated[StrictStr, Field(..., description="Id della richiesta")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /{transazioneId}/status - Stato transazione  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copia_digitale_transazione_id_status_get_with_http_info(transazione_id, async_req=True)
        >>> result = thread.get()

        :param transazione_id: Id della richiesta (required)
        :type transazione_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        warnings.warn("GET /copia-digitale/{transazione_id}/status is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'transazione_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copia_digitale_transazione_id_status_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['transazione_id'] is not None:
            _path_params['transazione_id'] = _params['transazione_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/copia-digitale/{transazione_id}/status', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
