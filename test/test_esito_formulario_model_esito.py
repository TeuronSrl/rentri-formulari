# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rentri_formulari.models.esito_formulario_model_esito import EsitoFormularioModelEsito

class TestEsitoFormularioModelEsito(unittest.TestCase):
    """EsitoFormularioModelEsito unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EsitoFormularioModelEsito:
        """Test EsitoFormularioModelEsito
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EsitoFormularioModelEsito`
        """
        model = EsitoFormularioModelEsito()
        if include_optional:
            return EsitoFormularioModelEsito(
                numero_fir = '',
                hash_algorithm = '',
                digest_to_sign = '',
                token = '',
                result = rentri_formulari.models.validazione_xfir_result.ValidazioneXfirResult(
                    formulario = null, 
                    numero_fir = '', 
                    formulario_presente_in_rentri = True, 
                    formulario_aggiornato_in_rentri = True, 
                    formato = [
                        rentri_formulari.models.controllo_formato_result.ControlloFormatoResult(
                            codice = '', 
                            esito = null, 
                            controllo = '', 
                            dettaglio = '', 
                            nome_file = '', )
                        ], 
                    schema = [
                        rentri_formulari.models.controllo_schema_result.ControlloSchemaResult(
                            codice = '', 
                            esito = null, 
                            controllo = '', 
                            dettaglio = '', 
                            nome_file = '', )
                        ], 
                    firme = [
                        rentri_formulari.models.controllo_firme_result.ControlloFirmeResult(
                            data_firma = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            riferimenti = [
                                ''
                                ], 
                            codice = '', 
                            esito = null, 
                            controllo = '', 
                            dettaglio = '', 
                            nome_file = '', )
                        ], 
                    vidimazione = [
                        rentri_formulari.models.controllo_vidimazione_result.ControlloVidimazioneResult(
                            codice = '', 
                            esito = null, 
                            controllo = '', 
                            dettaglio = '', 
                            nome_file = '', )
                        ], 
                    codice_fiscale_soggetto = '', 
                    valido = True, ),
                identificativo = '',
                formulario = rentri_formulari.models.dati_trasmissione_formulario_model.DatiTrasmissioneFormularioModel(
                    dati_partenza = null, 
                    dati_trasporto = [
                        null
                        ], 
                    dati_accettazione = null, 
                    dati_annotazioni = [
                        rentri_formulari.models.dati_annotazione_model.DatiAnnotazioneModel(
                            annotazione = '0', 
                            identificativo_soggetto = '0', )
                        ], 
                    dati_trasbordo_totale = null, 
                    dati_trasbordi_parziali = [
                        rentri_formulari.models.dati_trasbordo_parziale_trasmissione_model.DatiTrasbordoParzialeTrasmissioneModel(
                            trasportatore_id = 56, 
                            trasportatore = null, 
                            numero_fir = '0', 
                            quantita_residua = null, 
                            causale = '0', )
                        ], 
                    dati_soste_tecniche = [
                        rentri_formulari.models.dati_sosta_tecnica_trasmissione_model.DatiSostaTecnicaTrasmissioneModel(
                            trasportatore_id = 56, 
                            luogo_stazionamento = '0', 
                            data_ora_sospensione = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            data_ora_ripresa = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    dati_destinazioni_successive = [
                        rentri_formulari.models.dati_destinazioni_successive_trasmissioni_model.DatiDestinazioniSuccessiveTrasmissioniModel(
                            destinatario = null, 
                            accettazione = null, )
                        ], )
            )
        else:
            return EsitoFormularioModelEsito(
        )
        """

    def testEsitoFormularioModelEsito(self):
        """Test EsitoFormularioModelEsito"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
