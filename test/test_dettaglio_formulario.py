# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rentri_formulari.models.dettaglio_formulario import DettaglioFormulario  # noqa: E501

class TestDettaglioFormulario(unittest.TestCase):
    """DettaglioFormulario unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DettaglioFormulario:
        """Test DettaglioFormulario
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DettaglioFormulario`
        """
        model = DettaglioFormulario()  # noqa: E501
        if include_optional:
            return DettaglioFormulario(
                stato_formulario = 'InserimentoQuantita',
                versione = 56,
                dati_vidimazione = rentri_formulari.models.vidimazione_result.VidimazioneResult(
                    codice_fiscale = '', 
                    denominazione = '', ),
                num_iscr_sito = '',
                dati_partenza = rentri_formulari.models.dati_partenza_result_model.DatiPartenzaResultModel(
                    produttore = null, 
                    destinatario = null, 
                    trasportatori = [
                        rentri_formulari.models.dati_trasportatore_formulario_result_model.DatiTrasportatoreFormularioResultModel(
                            trasportatore_id = 56, )
                        ], 
                    intermediari = [
                        rentri_formulari.models.dati_intermediari_formulario_model.DatiIntermediariFormularioModel(
                            denominazione = '0', 
                            codice_fiscale = '01234', 
                            nazione_id = '', 
                            numero_iscrizione_albo = 'AE/807288', )
                        ], 
                    rifiuto = null, 
                    trasbordo_parziale_origine = null, 
                    dati_firma_produttore = null, 
                    numero_fir = 'WPQZYQ ) ._),,#_**&,\"%\"* - *- !'# 1757701929816286488291663/.$'\"&(_#+% #\"&%-/*- )!./ !),+#/)B', 
                    annotazioni = '', ),
                dati_trasporto = [
                    null
                    ],
                dati_accettazione = rentri_formulari.models.dati_accettazione_result_model.DatiAccettazioneResultModel(
                    dati_firma = null, 
                    tipo_accettazione = null, 
                    quantita_accettata = null, 
                    causale_respingimento = null, 
                    motivo_respingimento = '', 
                    data_ora_arrivo = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    attesa_verifica_analitica = True, ),
                dati_annotazioni = [
                    rentri_formulari.models.dati_annotazione_result_model.DatiAnnotazioneResultModel(
                        dati_firma = null, 
                        annotazione = '0', 
                        identificativo_soggetto = '0', )
                    ],
                dati_allegati = [
                    rentri_formulari.models.dati_allegato_result_model.DatiAllegatoResultModel(
                        dati_firma = null, 
                        content_type = '0', 
                        nome_file = '0', 
                        contenuto = 'YQ==', 
                        identificativo_soggetto = '0', 
                        descrizione = '', )
                    ],
                dati_annullamento = rentri_formulari.models.dati_annullamento_result_model.DatiAnnullamentoResultModel(
                    dati_firma = null, 
                    note = '0', 
                    codice_fiscale_soggetto = '01234', ),
                dati_trasbordo_totale = rentri_formulari.models.dati_trasbordo_totale_result_model.DatiTrasbordoTotaleResultModel(
                    trasportatore = null, 
                    presa_in_carico = null, 
                    trasportatore_id = 56, ),
                dati_trasbordi_parziali = [
                    rentri_formulari.models.dati_trasbordo_parziale_result_model.DatiTrasbordoParzialeResultModel(
                        trasportatore = null, 
                        data_ora_trasbordo = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        trasportatore_id = 56, 
                        dati_firma = null, 
                        numero_fir = '0', 
                        quantita_residua = null, 
                        causale = '0', )
                    ],
                dati_soste_tecniche = [
                    rentri_formulari.models.dati_sosta_tecnica_result_model.DatiSostaTecnicaResultModel(
                        data_ora_trasbordo = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        trasportatore_id = 56, 
                        dati_firma = null, 
                        luogo_stazionamento = '0', 
                        data_ora_sospensione = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_ora_ripresa = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                dati_destinazioni_successive = [
                    rentri_formulari.models.dati_destinazioni_successive_result_mdodel.DatiDestinazioniSuccessiveResultMdodel(
                        destinatario = null, 
                        accettazione = null, )
                    ]
            )
        else:
            return DettaglioFormulario(
        )
        """

    def testDettaglioFormulario(self):
        """Test DettaglioFormulario"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
