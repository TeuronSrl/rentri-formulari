# coding: utf-8

"""
    formulari

    Servizio Formulari RENTRI

    The version of the OpenAPI document: 1.0.20250114-507
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rentri_formulari.models.validazione_xfir_result import ValidazioneXfirResult  # noqa: E501

class TestValidazioneXfirResult(unittest.TestCase):
    """ValidazioneXfirResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ValidazioneXfirResult:
        """Test ValidazioneXfirResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ValidazioneXfirResult`
        """
        model = ValidazioneXfirResult()  # noqa: E501
        if include_optional:
            return ValidazioneXfirResult(
                formulario = rentri_formulari.models.dettaglio_formulario.DettaglioFormulario(
                    stato_formulario = null, 
                    versione = 56, 
                    dati_vidimazione = null, 
                    num_iscr_sito = '', 
                    dati_partenza = null, 
                    dati_trasporto = [
                        null
                        ], 
                    dati_accettazione = null, 
                    dati_annotazioni = [
                        rentri_formulari.models.dati_annotazione_result_model.DatiAnnotazioneResultModel(
                            dati_firma = null, 
                            annotazione = '0', 
                            identificativo_soggetto = '0', )
                        ], 
                    dati_allegati = [
                        rentri_formulari.models.dati_allegato_result_model.DatiAllegatoResultModel(
                            dati_firma = null, 
                            content_type = '0', 
                            nome_file = '0', 
                            contenuto = 'YQ==', 
                            identificativo_soggetto = '0', 
                            descrizione = '', )
                        ], 
                    dati_annullamento = null, 
                    dati_trasbordo_totale = null, 
                    dati_trasbordi_parziali = [
                        rentri_formulari.models.dati_trasbordo_parziale_result_model.DatiTrasbordoParzialeResultModel(
                            trasportatore = null, 
                            data_ora_trasbordo = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            trasportatore_id = 56, 
                            dati_firma = null, 
                            numero_fir = '0', 
                            quantita_residua = null, 
                            causale = '0', )
                        ], 
                    dati_soste_tecniche = [
                        rentri_formulari.models.dati_sosta_tecnica_result_model.DatiSostaTecnicaResultModel(
                            data_ora_trasbordo = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            trasportatore_id = 56, 
                            dati_firma = null, 
                            luogo_stazionamento = '0', 
                            data_ora_sospensione = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            data_ora_ripresa = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    dati_destinazioni_successive = [
                        rentri_formulari.models.dati_destinazioni_successive_result_mdodel.DatiDestinazioniSuccessiveResultMdodel(
                            destinatario = null, 
                            accettazione = null, )
                        ], ),
                numero_fir = '',
                formulario_presente_in_rentri = True,
                formulario_aggiornato_in_rentri = True,
                formato = [
                    rentri_formulari.models.controllo_formato_result.ControlloFormatoResult(
                        codice = '', 
                        esito = null, 
                        controllo = '', 
                        dettaglio = '', 
                        nome_file = '', )
                    ],
                var_schema = [
                    rentri_formulari.models.controllo_schema_result.ControlloSchemaResult(
                        codice = '', 
                        esito = null, 
                        controllo = '', 
                        dettaglio = '', 
                        nome_file = '', )
                    ],
                firme = [
                    rentri_formulari.models.controllo_firme_result.ControlloFirmeResult(
                        data_firma = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        riferimenti = [
                            ''
                            ], 
                        codice = '', 
                        esito = null, 
                        controllo = '', 
                        dettaglio = '', 
                        nome_file = '', )
                    ],
                vidimazione = [
                    rentri_formulari.models.controllo_vidimazione_result.ControlloVidimazioneResult(
                        codice = '', 
                        esito = null, 
                        controllo = '', 
                        dettaglio = '', 
                        nome_file = '', )
                    ],
                codice_fiscale_soggetto = '',
                valido = True
            )
        else:
            return ValidazioneXfirResult(
        )
        """

    def testValidazioneXfirResult(self):
        """Test ValidazioneXfirResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
